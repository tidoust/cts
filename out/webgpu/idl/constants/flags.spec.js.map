{"version":3,"sources":["../../../../src/webgpu/idl/constants/flags.spec.ts"],"names":["description","poptions","makeTestGroup","IDLTest","g","kBufferUsageExp","MAP_READ","MAP_WRITE","COPY_SRC","COPY_DST","INDEX","VERTEX","UNIFORM","STORAGE","INDIRECT","QUERY_RESOLVE","test","fn","t","assertMemberCount","GPUBufferUsage","params","Object","keys","key","assertMember","kTextureUsageExp","SAMPLED","OUTPUT_ATTACHMENT","GPUTextureUsage","kColorWriteExp","RED","GREEN","BLUE","ALPHA","ALL","GPUColorWrite","kShaderStageExp","FRAGMENT","COMPUTE","GPUShaderStage"],"mappings":"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","sourcesContent":["export const description = `\nTest the values of flags interfaces (e.g. GPUTextureUsage).\n`;\n\nimport { poptions } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { IDLTest } from '../idl_test.js';\n\nexport const g = makeTestGroup(IDLTest);\n\nconst kBufferUsageExp = {\n  MAP_READ: 0x0001,\n  MAP_WRITE: 0x0002,\n  COPY_SRC: 0x0004,\n  COPY_DST: 0x0008,\n  INDEX: 0x0010,\n  VERTEX: 0x0020,\n  UNIFORM: 0x0040,\n  STORAGE: 0x0080,\n  INDIRECT: 0x0100,\n  QUERY_RESOLVE: 0x0200,\n};\ng.test('BufferUsage,count').fn(t => {\n  t.assertMemberCount(GPUBufferUsage, kBufferUsageExp);\n});\ng.test('BufferUsage,values')\n  .params(poptions('key', Object.keys(kBufferUsageExp)))\n  .fn(t => {\n    const { key } = t.params;\n    t.assertMember(GPUBufferUsage, kBufferUsageExp, key);\n  });\n\nconst kTextureUsageExp = {\n  COPY_SRC: 0x01,\n  COPY_DST: 0x02,\n  SAMPLED: 0x04,\n  STORAGE: 0x08,\n  OUTPUT_ATTACHMENT: 0x10,\n};\ng.test('TextureUsage,count').fn(t => {\n  t.assertMemberCount(GPUTextureUsage, kTextureUsageExp);\n});\ng.test('TextureUsage,values')\n  .params(poptions('key', Object.keys(kTextureUsageExp)))\n  .fn(t => {\n    const { key } = t.params;\n    t.assertMember(GPUTextureUsage, kTextureUsageExp, key);\n  });\n\nconst kColorWriteExp = {\n  RED: 0x1,\n  GREEN: 0x2,\n  BLUE: 0x4,\n  ALPHA: 0x8,\n  ALL: 0xf,\n};\ng.test('ColorWrite,count').fn(t => {\n  t.assertMemberCount(GPUColorWrite, kColorWriteExp);\n});\ng.test('ColorWrite,values')\n  .params(poptions('key', Object.keys(kColorWriteExp)))\n  .fn(t => {\n    const { key } = t.params;\n    t.assertMember(GPUColorWrite, kColorWriteExp, key);\n  });\n\nconst kShaderStageExp = {\n  VERTEX: 0x1,\n  FRAGMENT: 0x2,\n  COMPUTE: 0x4,\n};\ng.test('ShaderStage,count').fn(t => {\n  t.assertMemberCount(GPUShaderStage, kShaderStageExp);\n});\ng.test('ShaderStage,values')\n  .params(poptions('key', Object.keys(kShaderStageExp)))\n  .fn(t => {\n    const { key } = t.params;\n    t.assertMember(GPUShaderStage, kShaderStageExp, key);\n  });\n"],"file":"flags.spec.js"}