{"version":3,"sources":["../../../../src/webgpu/api/validation/validation_test.ts"],"names":["unreachable","GPUTest","ValidationTest","getStorageBuffer","device","createBuffer","size","usage","GPUBufferUsage","STORAGE","getUniformBuffer","UNIFORM","getErrorBuffer","pushErrorScope","errorBuffer","popErrorScope","getSampler","createSampler","getComparisonSampler","compare","getErrorSampler","sampler","lodMinClamp","getSampledTexture","createTexture","width","height","depth","format","GPUTextureUsage","SAMPLED","getStorageTexture","getErrorTexture","texture","getErrorTextureView","view","createView","getBindingResource","bindingType","buffer","expectValidationError","fn","shouldError","promise","eventualAsyncExpectation","niceStack","gpuValidationError","message","rec","validationFailed","GPUValidationError","debug"],"mappings":";;GAAA,SAASA,WAAT,QAA4B,wCAA5B,CAEA,SAASC,OAAT,QAAwB,mBAAxB;;AAEA,OAAO,MAAMC,cAAN,SAA6BD,OAA7B,CAAqC;AAC1CE,EAAAA,gBAAgB,GAAc;AAC5B,WAAO,KAAKC,MAAL,CAAYC,YAAZ,CAAyB,EAAEC,IAAI,EAAE,IAAR,EAAcC,KAAK,EAAEC,cAAc,CAACC,OAApC,EAAzB,CAAP;AACD;;AAEDC,EAAAA,gBAAgB,GAAc;AAC5B,WAAO,KAAKN,MAAL,CAAYC,YAAZ,CAAyB,EAAEC,IAAI,EAAE,IAAR,EAAcC,KAAK,EAAEC,cAAc,CAACG,OAApC,EAAzB,CAAP;AACD;;AAEDC,EAAAA,cAAc,GAAc;AAC1B,SAAKR,MAAL,CAAYS,cAAZ,CAA2B,YAA3B;AACA,UAAMC,WAAW,GAAG,KAAKV,MAAL,CAAYC,YAAZ,CAAyB;AAC3CC,MAAAA,IAAI,EAAE,IADqC;AAE3CC,MAAAA,KAAK,EAAE,MAFoC,CAE5B;AAF4B,KAAzB,CAApB;AAIA,SAAKH,MAAL,CAAYW,aAAZ;AACA,WAAOD,WAAP;AACD;;AAEDE,EAAAA,UAAU,GAAe;AACvB,WAAO,KAAKZ,MAAL,CAAYa,aAAZ,EAAP;AACD;;AAEDC,EAAAA,oBAAoB,GAAe;AACjC,WAAO,KAAKd,MAAL,CAAYa,aAAZ,CAA0B,EAAEE,OAAO,EAAE,OAAX,EAA1B,CAAP;AACD;;AAEDC,EAAAA,eAAe,GAAe;AAC5B,SAAKhB,MAAL,CAAYS,cAAZ,CAA2B,YAA3B;AACA,UAAMQ,OAAO,GAAG,KAAKjB,MAAL,CAAYa,aAAZ,CAA0B,EAAEK,WAAW,EAAE,CAAC,CAAhB,EAA1B,CAAhB;AACA,SAAKlB,MAAL,CAAYW,aAAZ;AACA,WAAOM,OAAP;AACD;;AAEDE,EAAAA,iBAAiB,GAAe;AAC9B,WAAO,KAAKnB,MAAL,CAAYoB,aAAZ,CAA0B;AAC/BlB,MAAAA,IAAI,EAAE,EAAEmB,KAAK,EAAE,EAAT,EAAaC,MAAM,EAAE,EAArB,EAAyBC,KAAK,EAAE,CAAhC,EADyB;AAE/BC,MAAAA,MAAM,EAAE,YAFuB;AAG/BrB,MAAAA,KAAK,EAAEsB,eAAe,CAACC,OAHQ,EAA1B,CAAP;;AAKD;;AAEDC,EAAAA,iBAAiB,GAAe;AAC9B,WAAO,KAAK3B,MAAL,CAAYoB,aAAZ,CAA0B;AAC/BlB,MAAAA,IAAI,EAAE,EAAEmB,KAAK,EAAE,EAAT,EAAaC,MAAM,EAAE,EAArB,EAAyBC,KAAK,EAAE,CAAhC,EADyB;AAE/BC,MAAAA,MAAM,EAAE,YAFuB;AAG/BrB,MAAAA,KAAK,EAAEsB,eAAe,CAACpB,OAHQ,EAA1B,CAAP;;AAKD;;AAEDuB,EAAAA,eAAe,GAAe;AAC5B,SAAK5B,MAAL,CAAYS,cAAZ,CAA2B,YAA3B;AACA,UAAMoB,OAAO,GAAG,KAAK7B,MAAL,CAAYoB,aAAZ,CAA0B;AACxClB,MAAAA,IAAI,EAAE,EAAEmB,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,KAAK,EAAE,CAA9B,EADkC;AAExCC,MAAAA,MAAM,EAAE,YAFgC;AAGxCrB,MAAAA,KAAK,EAAEsB,eAAe,CAACC,OAHiB,EAA1B,CAAhB;;AAKA,SAAK1B,MAAL,CAAYW,aAAZ;AACA,WAAOkB,OAAP;AACD;;AAEDC,EAAAA,mBAAmB,GAAmB;AACpC,SAAK9B,MAAL,CAAYS,cAAZ,CAA2B,YAA3B;AACA,UAAMsB,IAAI,GAAG,KAAKH,eAAL,GAAuBI,UAAvB,EAAb;AACA,SAAKhC,MAAL,CAAYW,aAAZ;AACA,WAAOoB,IAAP;AACD;;AAEDE,EAAAA,kBAAkB,CAACC,WAAD,EAAoD;AACpE,YAAQA,WAAR;AACE,WAAK,UAAL;AACE,eAAO,EAAEC,MAAM,EAAE,KAAK3B,cAAL,EAAV,EAAP;AACF,WAAK,WAAL;AACE,eAAO,KAAKQ,eAAL,EAAP;AACF,WAAK,UAAL;AACE,eAAO,KAAKc,mBAAL,EAAP;AACF,WAAK,YAAL;AACE,eAAO,EAAEK,MAAM,EAAE,KAAK7B,gBAAL,EAAV,EAAP;AACF,WAAK,YAAL;AACE,eAAO,EAAE6B,MAAM,EAAE,KAAKpC,gBAAL,EAAV,EAAP;AACF,WAAK,WAAL;AACE,eAAO,KAAKa,UAAL,EAAP;AACF,WAAK,aAAL;AACE,eAAO,KAAKE,oBAAL,EAAP;AACF,WAAK,YAAL;AACE,eAAO,KAAKK,iBAAL,GAAyBa,UAAzB,EAAP;AACF,WAAK,YAAL;AACE,eAAO,KAAKL,iBAAL,GAAyBK,UAAzB,EAAP;AACF;AACEpC,QAAAA,WAAW,CAAC,+BAAD,CAAX,CApBJ;;AAsBD;;AAEDwC,EAAAA,qBAAqB,CAACC,EAAD,EAAeC,WAAoB,GAAG,IAAtC,EAAkD;AACrE;AACA,QAAIA,WAAW,KAAK,KAApB,EAA2B;AACzBD,MAAAA,EAAE;AACF;AACD;;AAED,SAAKrC,MAAL,CAAYS,cAAZ,CAA2B,YAA3B;AACA4B,IAAAA,EAAE;AACF,UAAME,OAAO,GAAG,KAAKvC,MAAL,CAAYW,aAAZ,EAAhB;;AAEA,SAAK6B,wBAAL,CAA8B,MAAMC,SAAN,IAAmB;AAC/C,YAAMC,kBAAkB,GAAG,MAAMH,OAAjC;AACA,UAAI,CAACG,kBAAL,EAAyB;AACvBD,QAAAA,SAAS,CAACE,OAAV,GAAoB,gCAApB;AACA,aAAKC,GAAL,CAASC,gBAAT,CAA0BJ,SAA1B;AACD,OAHD,MAGO,IAAIC,kBAAkB,YAAYI,kBAAlC,EAAsD;AAC3DL,QAAAA,SAAS,CAACE,OAAV,GAAqB,+BAA8BD,kBAAkB,CAACC,OAAQ,EAA9E;AACA,aAAKC,GAAL,CAASG,KAAT,CAAeN,SAAf;AACD;AACF,KATD;AAUD,GAlHyC","sourcesContent":["import { unreachable } from '../../../common/framework/util/util.js';\nimport { BindableResource } from '../../capability_info.js';\nimport { GPUTest } from '../../gpu_test.js';\n\nexport class ValidationTest extends GPUTest {\n  getStorageBuffer(): GPUBuffer {\n    return this.device.createBuffer({ size: 1024, usage: GPUBufferUsage.STORAGE });\n  }\n\n  getUniformBuffer(): GPUBuffer {\n    return this.device.createBuffer({ size: 1024, usage: GPUBufferUsage.UNIFORM });\n  }\n\n  getErrorBuffer(): GPUBuffer {\n    this.device.pushErrorScope('validation');\n    const errorBuffer = this.device.createBuffer({\n      size: 1024,\n      usage: 0xffff, // Invalid GPUBufferUsage\n    });\n    this.device.popErrorScope();\n    return errorBuffer;\n  }\n\n  getSampler(): GPUSampler {\n    return this.device.createSampler();\n  }\n\n  getComparisonSampler(): GPUSampler {\n    return this.device.createSampler({ compare: 'never' });\n  }\n\n  getErrorSampler(): GPUSampler {\n    this.device.pushErrorScope('validation');\n    const sampler = this.device.createSampler({ lodMinClamp: -1 });\n    this.device.popErrorScope();\n    return sampler;\n  }\n\n  getSampledTexture(): GPUTexture {\n    return this.device.createTexture({\n      size: { width: 16, height: 16, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.SAMPLED,\n    });\n  }\n\n  getStorageTexture(): GPUTexture {\n    return this.device.createTexture({\n      size: { width: 16, height: 16, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.STORAGE,\n    });\n  }\n\n  getErrorTexture(): GPUTexture {\n    this.device.pushErrorScope('validation');\n    const texture = this.device.createTexture({\n      size: { width: 0, height: 0, depth: 0 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.SAMPLED,\n    });\n    this.device.popErrorScope();\n    return texture;\n  }\n\n  getErrorTextureView(): GPUTextureView {\n    this.device.pushErrorScope('validation');\n    const view = this.getErrorTexture().createView();\n    this.device.popErrorScope();\n    return view;\n  }\n\n  getBindingResource(bindingType: BindableResource): GPUBindingResource {\n    switch (bindingType) {\n      case 'errorBuf':\n        return { buffer: this.getErrorBuffer() };\n      case 'errorSamp':\n        return this.getErrorSampler();\n      case 'errorTex':\n        return this.getErrorTextureView();\n      case 'uniformBuf':\n        return { buffer: this.getUniformBuffer() };\n      case 'storageBuf':\n        return { buffer: this.getStorageBuffer() };\n      case 'plainSamp':\n        return this.getSampler();\n      case 'compareSamp':\n        return this.getComparisonSampler();\n      case 'sampledTex':\n        return this.getSampledTexture().createView();\n      case 'storageTex':\n        return this.getStorageTexture().createView();\n      default:\n        unreachable('unknown binding resource type');\n    }\n  }\n\n  expectValidationError(fn: Function, shouldError: boolean = true): void {\n    // If no error is expected, we let the scope surrounding the test catch it.\n    if (shouldError === false) {\n      fn();\n      return;\n    }\n\n    this.device.pushErrorScope('validation');\n    fn();\n    const promise = this.device.popErrorScope();\n\n    this.eventualAsyncExpectation(async niceStack => {\n      const gpuValidationError = await promise;\n      if (!gpuValidationError) {\n        niceStack.message = 'Validation error was expected.';\n        this.rec.validationFailed(niceStack);\n      } else if (gpuValidationError instanceof GPUValidationError) {\n        niceStack.message = `Captured validation error - ${gpuValidationError.message}`;\n        this.rec.debug(niceStack);\n      }\n    });\n  }\n}\n"],"file":"validation_test.js"}