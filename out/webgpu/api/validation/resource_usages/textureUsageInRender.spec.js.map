{"version":3,"sources":["../../../../../src/webgpu/api/validation/resource_usages/textureUsageInRender.spec.ts"],"names":["description","poptions","params","makeTestGroup","kShaderStages","kDepthStencilFormats","kDepthStencilFormatInfo","ValidationTest","TextureUsageTracking","createTexture","options","width","height","arrayLayerCount","mipLevelCount","sampleCount","format","usage","GPUTextureUsage","OUTPUT_ATTACHMENT","SAMPLED","device","size","depth","dimension","g","BASE_LEVEL","BASE_LAYER","TOTAL_LEVELS","TOTAL_LAYERS","test","combine","baseLevel","baseLayer","levelCount","layerCount","_resourceSuccess","type0","type1","_usageSuccess","fn","t","texture","STORAGE","view0","createView","baseMipLevel","baseArrayLayer","view1Dimension","view1","bglEntries","binding","visibility","GPUShaderStage","FRAGMENT","type","storageTextureFormat","undefined","bgEntries","resource","push","viewDimension","bindGroup","createBindGroup","entries","layout","createBindGroupLayout","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","attachment","loadValue","r","b","a","storeOp","setBindGroup","endPass","success","expectValidationError","finish","unless","aspect0","aspect1","stencil","aspect","depthStencilAttachment","depthStoreOp","depthLoadValue","stencilStoreOp","stencilLoadValue","disjointAspects","readVisibility","writeVisibility","writeHasVertexStage","Boolean","VERTEX","texUsage","view"],"mappings":"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","sourcesContent":["export const description = `\nTexture Usages Validation Tests in Render Pass.\n\nTest Coverage:\n\n  - For each combination of two texture usages:\n    - For various subresource ranges (different mip levels or array layers) that overlap a given\n      subresources or not for color formats:\n      - Check that an error is generated when read-write or write-write usages are binding to the\n        same texture subresource. Otherwise, no error should be generated. One exception is race\n        condition upon two writeonly-storage-texture usages, which is valid.\n\n  - For each combination of two texture usages:\n    - For various aspects (all, depth-only, stencil-only) that overlap a given subresources or not\n      for depth/stencil formats:\n      - Check that an error is generated when read-write or write-write usages are binding to the\n        same aspect. Otherwise, no error should be generated.\n\n  - Test combinations of two shader stages:\n    - Texture usages in bindings with invisible shader stages should be tracked. Invisible shader\n      stages include shader stage with visibility none and compute shader stage in render pass.\n`;\n\nimport { poptions, params } from '../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport {\n  kShaderStages,\n  kDepthStencilFormats,\n  kDepthStencilFormatInfo,\n} from '../../../capability_info.js';\nimport { ValidationTest } from '../validation_test.js';\n\nclass TextureUsageTracking extends ValidationTest {\n  createTexture(\n    options: {\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n      format?: GPUTextureFormat;\n      usage?: GPUTextureUsageFlags;\n    } = {}\n  ): GPUTexture {\n    const {\n      width = 32,\n      height = 32,\n      arrayLayerCount = 1,\n      mipLevelCount = 1,\n      sampleCount = 1,\n      format = 'rgba8unorm',\n      usage = GPUTextureUsage.OUTPUT_ATTACHMENT | GPUTextureUsage.SAMPLED,\n    } = options;\n\n    return this.device.createTexture({\n      size: { width, height, depth: arrayLayerCount },\n      mipLevelCount,\n      sampleCount,\n      dimension: '2d',\n      format,\n      usage,\n    });\n  }\n}\n\nexport const g = makeTestGroup(TextureUsageTracking);\n\nconst BASE_LEVEL = 3;\nconst BASE_LAYER = 0;\nconst TOTAL_LEVELS = 6;\nconst TOTAL_LAYERS = 2;\n\ng.test('subresources_and_binding_types_combination_for_color')\n  .params(\n    params()\n      .combine([\n        // Two texture usages are binding to the same texture subresource.\n        {\n          baseLevel: BASE_LEVEL,\n          baseLayer: BASE_LAYER,\n          levelCount: 1,\n          layerCount: 1,\n          _resourceSuccess: false,\n        },\n\n        // Two texture usages are binding to different mip levels of the same texture.\n        {\n          baseLevel: BASE_LEVEL + 1,\n          baseLayer: BASE_LAYER,\n          levelCount: 1,\n          layerCount: 1,\n          _resourceSuccess: true,\n        },\n\n        // Two texture usages are binding to different array layers of the same texture.\n        {\n          baseLevel: BASE_LEVEL,\n          baseLayer: BASE_LAYER + 1,\n          levelCount: 1,\n          layerCount: 1,\n          _resourceSuccess: true,\n        },\n\n        // The second texture usage contains the whole mip chain where the first texture usage is using.\n        {\n          baseLevel: 0,\n          baseLayer: BASE_LAYER,\n          levelCount: TOTAL_LEVELS,\n          layerCount: 1,\n          _resourceSuccess: false,\n        },\n\n        // The second texture usage contains the all layers where the first texture usage is using.\n        {\n          baseLevel: BASE_LEVEL,\n          baseLayer: 0,\n          levelCount: 1,\n          layerCount: TOTAL_LAYERS,\n          _resourceSuccess: false,\n        },\n      ])\n      .combine([\n        {\n          type0: 'sampled-texture',\n          type1: 'sampled-texture',\n          _usageSuccess: true,\n        },\n        {\n          type0: 'sampled-texture',\n          type1: 'readonly-storage-texture',\n          _usageSuccess: true,\n        },\n        {\n          type0: 'sampled-texture',\n          type1: 'writeonly-storage-texture',\n          _usageSuccess: false,\n        },\n        {\n          type0: 'sampled-texture',\n          type1: 'render-target',\n          _usageSuccess: false,\n        },\n        {\n          type0: 'readonly-storage-texture',\n          type1: 'readonly-storage-texture',\n          _usageSuccess: true,\n        },\n        {\n          type0: 'readonly-storage-texture',\n          type1: 'writeonly-storage-texture',\n          _usageSuccess: false,\n        },\n        {\n          type0: 'readonly-storage-texture',\n          type1: 'render-target',\n          _usageSuccess: false,\n        },\n        // Race condition upon multiple writable storage texture is valid.\n        {\n          type0: 'writeonly-storage-texture',\n          type1: 'writeonly-storage-texture',\n          _usageSuccess: true,\n        },\n        {\n          type0: 'writeonly-storage-texture',\n          type1: 'render-target',\n          _usageSuccess: false,\n        },\n      ] as const)\n  )\n  .fn(async t => {\n    const {\n      baseLevel,\n      baseLayer,\n      levelCount,\n      layerCount,\n      type0,\n      type1,\n      _usageSuccess,\n      _resourceSuccess,\n    } = t.params;\n\n    const texture = t.createTexture({\n      arrayLayerCount: TOTAL_LAYERS,\n      mipLevelCount: TOTAL_LEVELS,\n      usage: GPUTextureUsage.SAMPLED | GPUTextureUsage.STORAGE | GPUTextureUsage.OUTPUT_ATTACHMENT,\n    });\n\n    const view0 = texture.createView({\n      baseMipLevel: BASE_LEVEL,\n      mipLevelCount: 1,\n      baseArrayLayer: BASE_LAYER,\n      arrayLayerCount: 1,\n    });\n\n    const view1Dimension = layerCount !== 1 ? '2d-array' : '2d';\n    const view1 = texture.createView({\n      dimension: view1Dimension,\n      baseMipLevel: baseLevel,\n      mipLevelCount: levelCount,\n      baseArrayLayer: baseLayer,\n      arrayLayerCount: layerCount,\n    });\n\n    // TODO: Add two 'render-target' usages for color attachments.\n    const bglEntries: GPUBindGroupLayoutEntry[] = [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.FRAGMENT,\n        type: type0,\n        storageTextureFormat: type0 === 'sampled-texture' ? undefined : 'rgba8unorm',\n      },\n    ];\n    const bgEntries: GPUBindGroupEntry[] = [{ binding: 0, resource: view0 }];\n    if (type1 !== 'render-target') {\n      bglEntries.push({\n        binding: 1,\n        visibility: GPUShaderStage.FRAGMENT,\n        type: type1,\n        viewDimension: view1Dimension,\n        storageTextureFormat: type1 === 'sampled-texture' ? undefined : 'rgba8unorm',\n      });\n      bgEntries.push({ binding: 1, resource: view1 });\n    }\n    const bindGroup = t.device.createBindGroup({\n      entries: bgEntries,\n      layout: t.device.createBindGroupLayout({ entries: bglEntries }),\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: type1 === 'render-target' ? view1 : t.createTexture().createView(),\n          loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass.setBindGroup(0, bindGroup);\n    pass.endPass();\n\n    const success = _resourceSuccess || _usageSuccess;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('subresources_and_binding_types_combination_for_aspect')\n  .params(\n    params()\n      .combine(poptions('format', kDepthStencilFormats))\n      .combine(poptions('aspect0', ['all', 'depth-only', 'stencil-only'] as const))\n      .combine(poptions('aspect1', ['all', 'depth-only', 'stencil-only'] as const))\n      .unless(\n        ({ format, aspect0, aspect1 }) =>\n          (aspect0 === 'stencil-only' && !kDepthStencilFormatInfo[format].stencil) ||\n          (aspect1 === 'stencil-only' && !kDepthStencilFormatInfo[format].stencil)\n      )\n      .unless(\n        ({ format, aspect0, aspect1 }) =>\n          (aspect0 === 'depth-only' && !kDepthStencilFormatInfo[format].depth) ||\n          (aspect1 === 'depth-only' && !kDepthStencilFormatInfo[format].depth)\n      )\n      .combine([\n        {\n          type0: 'sampled-texture',\n          type1: 'sampled-texture',\n          _usageSuccess: true,\n        },\n        {\n          type0: 'sampled-texture',\n          type1: 'render-target',\n          _usageSuccess: false,\n        },\n      ] as const)\n  )\n  .fn(async t => {\n    const { format, aspect0, aspect1, type0, type1, _usageSuccess } = t.params;\n\n    const texture = t.createTexture({ format });\n    const view0 = texture.createView({ aspect: aspect0 });\n    const view1 = texture.createView({ aspect: aspect1 });\n\n    const bglEntries: GPUBindGroupLayoutEntry[] = [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.FRAGMENT,\n        type: type0,\n      },\n    ];\n    const bgEntries: GPUBindGroupEntry[] = [{ binding: 0, resource: view0 }];\n    if (type1 !== 'render-target') {\n      bglEntries.push({\n        binding: 1,\n        visibility: GPUShaderStage.FRAGMENT,\n        type: type1,\n      });\n      bgEntries.push({ binding: 1, resource: view1 });\n    }\n    const bindGroup = t.device.createBindGroup({\n      entries: bgEntries,\n      layout: t.device.createBindGroupLayout({ entries: bglEntries }),\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: t.createTexture().createView(),\n          loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n      depthStencilAttachment:\n        type1 !== 'render-target'\n          ? undefined\n          : {\n              attachment: view1,\n              depthStoreOp: 'clear',\n              depthLoadValue: 'load',\n              stencilStoreOp: 'clear',\n              stencilLoadValue: 'load',\n            },\n    });\n    pass.setBindGroup(0, bindGroup);\n    pass.endPass();\n\n    const disjointAspects =\n      (aspect0 === 'depth-only' && aspect1 === 'stencil-only') ||\n      (aspect0 === 'stencil-only' && aspect1 === 'depth-only');\n    const success = disjointAspects || _usageSuccess;\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('shader_stages_and_visibility')\n  .params(\n    params()\n      .combine(poptions('readVisibility', [0, ...kShaderStages]))\n      .combine(poptions('writeVisibility', [0, ...kShaderStages]))\n  )\n  .fn(async t => {\n    const { readVisibility, writeVisibility } = t.params;\n\n    // writeonly-storage-texture binding type is not supported in vertex stage. So, this test\n    // uses writeonly-storage-texture binding as writable binding upon the same subresource if\n    // vertex stage is not included. Otherwise, it uses output attachment instead.\n    const writeHasVertexStage = Boolean(writeVisibility & GPUShaderStage.VERTEX);\n    const texUsage = writeHasVertexStage\n      ? GPUTextureUsage.SAMPLED | GPUTextureUsage.OUTPUT_ATTACHMENT\n      : GPUTextureUsage.SAMPLED | GPUTextureUsage.STORAGE;\n\n    const texture = t.createTexture({ usage: texUsage });\n    const view = texture.createView();\n    const bglEntries: GPUBindGroupLayoutEntry[] = [\n      { binding: 0, visibility: readVisibility, type: 'sampled-texture' },\n    ];\n    const bgEntries: GPUBindGroupEntry[] = [{ binding: 0, resource: view }];\n    if (!writeHasVertexStage) {\n      bglEntries.push({\n        binding: 1,\n        visibility: writeVisibility,\n        type: 'writeonly-storage-texture',\n        storageTextureFormat: 'rgba8unorm',\n      });\n      bgEntries.push({ binding: 1, resource: view });\n    }\n    const bindGroup = t.device.createBindGroup({\n      entries: bgEntries,\n      layout: t.device.createBindGroupLayout({ entries: bglEntries }),\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: writeHasVertexStage ? view : t.createTexture().createView(),\n          loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass.setBindGroup(0, bindGroup);\n    pass.endPass();\n\n    // Texture usages in bindings with invisible shader stages should be tracked. Invisible shader\n    // stages include shader stage with visibility none and compute shader stage in render pass.\n    t.expectValidationError(() => {\n      encoder.finish();\n    });\n  });\n"],"file":"textureUsageInRender.spec.js"}