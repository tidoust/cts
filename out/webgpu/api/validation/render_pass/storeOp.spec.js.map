{"version":3,"sources":["../../../../../src/webgpu/api/validation/render_pass/storeOp.spec.ts"],"names":["description","makeTestGroup","ValidationTest","g","test","params","readonly","_valid","depthStoreOp","stencilStoreOp","depthReadOnly","stencilReadOnly","undefined","fn","t","depthAttachment","device","createTexture","format","size","width","height","depth","usage","GPUTextureUsage","OUTPUT_ATTACHMENT","depthAttachmentView","createView","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","depthStencilAttachment","attachment","depthLoadValue","stencilLoadValue","endPass","expectValidationError","finish"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;;;;;;;;;;;;;mEAArB,CAeP,SAASC,aAAT,QAA8B,4CAA9B;;AAEA,SAASC,cAAT,QAA+B,yBAA/B;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,cAAD,CAAvB;;AAEPC,CAAC,CAACC,IAAF,CAAO,wBAAP;AACGC,MADH,CACU;AACN,EAAEC,QAAQ,EAAE,IAAZ,EAAkBC,MAAM,EAAE,IAA1B,EADM;AAEN;AACA,EAAED,QAAQ,EAAE,IAAZ,EAAkBE,YAAY,EAAE,OAAhC,EAAyCD,MAAM,EAAE,KAAjD,EAHM;AAIN;AACA,EAAED,QAAQ,EAAE,IAAZ,EAAkBG,cAAc,EAAE,OAAlC,EAA2CF,MAAM,EAAE,KAAnD,EALM;AAMN;AACA,EAAED,QAAQ,EAAE,KAAZ,EAAmBC,MAAM,EAAE,IAA3B,EAPM;AAQN,EAAED,QAAQ,EAAE,KAAZ,EAAmBI,aAAa,EAAE,IAAlC,EAAwCH,MAAM,EAAE,KAAhD,EARM;AASN,EAAED,QAAQ,EAAE,KAAZ,EAAmBK,eAAe,EAAE,IAApC,EAA0CJ,MAAM,EAAE,KAAlD,EATM;AAUN;AACA,EAAED,QAAQ,EAAEM,SAAZ,EAAuBL,MAAM,EAAE,IAA/B,EAXM;AAYN,EAAED,QAAQ,EAAEM,SAAZ,EAAuBF,aAAa,EAAE,IAAtC,EAA4CH,MAAM,EAAE,KAApD,EAZM;AAaN,EAAED,QAAQ,EAAEM,SAAZ,EAAuBD,eAAe,EAAE,IAAxC,EAA8CJ,MAAM,EAAE,KAAtD,EAbM,CADV;;AAgBGM,EAhBH,CAgBM,MAAMC,CAAN,IAAW;AACb,QAAM;AACJR,IAAAA,QADI;AAEJE,IAAAA,YAAY,GAAG,OAFX;AAGJE,IAAAA,aAAa,GAAGJ,QAHZ;AAIJG,IAAAA,cAAc,GAAG,OAJb;AAKJE,IAAAA,eAAe,GAAGL,QALd;AAMJC,IAAAA,MANI;AAOFO,EAAAA,CAAC,CAACT,MAPN;;AASA,QAAMU,eAAe,GAAGD,CAAC,CAACE,MAAF,CAASC,aAAT,CAAuB;AAC7CC,IAAAA,MAAM,EAAE,sBADqC;AAE7CC,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,KAAK,EAAE,CAA9B,EAFuC;AAG7CC,IAAAA,KAAK,EAAEC,eAAe,CAACC,iBAHsB,EAAvB,CAAxB;;AAKA,QAAMC,mBAAmB,GAAGX,eAAe,CAACY,UAAhB,EAA5B;;AAEA,QAAMC,OAAO,GAAGd,CAAC,CAACE,MAAF,CAASa,oBAAT,EAAhB;AACA,QAAMC,IAAI,GAAGF,OAAO,CAACG,eAAR,CAAwB;AACnCC,IAAAA,gBAAgB,EAAE,EADiB;AAEnCC,IAAAA,sBAAsB,EAAE;AACtBC,MAAAA,UAAU,EAAER,mBADU;AAEtBS,MAAAA,cAAc,EAAE,MAFM;AAGtB3B,MAAAA,YAHsB;AAItBE,MAAAA,aAJsB;AAKtB0B,MAAAA,gBAAgB,EAAE,MALI;AAMtB3B,MAAAA,cANsB;AAOtBE,MAAAA,eAPsB,EAFW,EAAxB,CAAb;;;AAYAmB,EAAAA,IAAI,CAACO,OAAL;;AAEAvB,EAAAA,CAAC,CAACwB,qBAAF,CAAwB,MAAM;AAC5BV,IAAAA,OAAO,CAACW,MAAR;AACD,GAFD,EAEG,CAAChC,MAFJ;AAGD,CAnDH","sourcesContent":["export const description = `\nAPI Validation Tests for RenderPass StoreOp.\n\nTest Coverage:\n  - Tests that when depthReadOnly is true, depthStoreOp must be 'store'.\n    - When depthReadOnly is true and depthStoreOp is 'clear', an error should be generated.\n\n  - Tests that when stencilReadOnly is true, stencilStoreOp must be 'store'.\n    - When stencilReadOnly is true and stencilStoreOp is 'clear', an error should be generated.\n\n  - Tests that the depthReadOnly value matches the stencilReadOnly value.\n    - When depthReadOnly does not match stencilReadOnly, an error should be generated.\n\n  - Tests that depthReadOnly and stencilReadOnly default to false.`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\n\nimport { ValidationTest } from './../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('store_op_and_read_only')\n  .params([\n    { readonly: true, _valid: true },\n    // Using depthReadOnly=true and depthStoreOp='clear' should cause a validation error.\n    { readonly: true, depthStoreOp: 'clear', _valid: false },\n    // Using stencilReadOnly=true and stencilStoreOp='clear' should cause a validation error.\n    { readonly: true, stencilStoreOp: 'clear', _valid: false },\n    // Mismatched depthReadOnly and stencilReadOnly values should cause a validation error.\n    { readonly: false, _valid: true },\n    { readonly: false, depthReadOnly: true, _valid: false },\n    { readonly: false, stencilReadOnly: true, _valid: false },\n    // depthReadOnly and stencilReadOnly should default to false.\n    { readonly: undefined, _valid: true },\n    { readonly: undefined, depthReadOnly: true, _valid: false },\n    { readonly: undefined, stencilReadOnly: true, _valid: false },\n  ] as const)\n  .fn(async t => {\n    const {\n      readonly,\n      depthStoreOp = 'store',\n      depthReadOnly = readonly,\n      stencilStoreOp = 'store',\n      stencilReadOnly = readonly,\n      _valid,\n    } = t.params;\n\n    const depthAttachment = t.device.createTexture({\n      format: 'depth24plus-stencil8',\n      size: { width: 1, height: 1, depth: 1 },\n      usage: GPUTextureUsage.OUTPUT_ATTACHMENT,\n    });\n    const depthAttachmentView = depthAttachment.createView();\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [],\n      depthStencilAttachment: {\n        attachment: depthAttachmentView,\n        depthLoadValue: 'load',\n        depthStoreOp,\n        depthReadOnly,\n        stencilLoadValue: 'load',\n        stencilStoreOp,\n        stencilReadOnly,\n      },\n    });\n    pass.endPass();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !_valid);\n  });\n"],"file":"storeOp.spec.js"}