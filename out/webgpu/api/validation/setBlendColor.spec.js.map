{"version":3,"sources":["../../../../src/webgpu/api/validation/setBlendColor.spec.ts"],"names":["description","makeTestGroup","ValidationTest","F","beginRenderPass","commandEncoder","attachmentTexture","device","createTexture","format","size","width","height","depth","usage","GPUTextureUsage","OUTPUT_ATTACHMENT","colorAttachments","attachment","createView","loadValue","r","g","b","a","test","fn","t","createCommandEncoder","renderPass","setBlendColor","endPass","finish","values","Number","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","value"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;;CAArB,CAIP,SAASC,aAAT,QAA8B,yCAA9B;;AAEA,SAASC,cAAT,QAA+B,sBAA/B;;AAEA;AACA,MAAMC,CAAN,SAAgBD,cAAhB,CAA+B;AAC7BE,EAAAA,eAAe,CAACC,cAAD,EAA0D;AACvE,UAAMC,iBAAiB,GAAG,KAAKC,MAAL,CAAYC,aAAZ,CAA0B;AAClDC,MAAAA,MAAM,EAAE,YAD0C;AAElDC,MAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,EAAT,EAAaC,MAAM,EAAE,EAArB,EAAyBC,KAAK,EAAE,CAAhC,EAF4C;AAGlDC,MAAAA,KAAK,EAAEC,eAAe,CAACC,iBAH2B,EAA1B,CAA1B;;;AAMA,WAAOX,cAAc,CAACD,eAAf,CAA+B;AACpCa,MAAAA,gBAAgB,EAAE;AAChB;AACEC,QAAAA,UAAU,EAAEZ,iBAAiB,CAACa,UAAlB,EADd;AAEEC,QAAAA,SAAS,EAAE,EAAEC,CAAC,EAAE,GAAL,EAAUC,CAAC,EAAE,GAAb,EAAkBC,CAAC,EAAE,GAArB,EAA0BC,CAAC,EAAE,GAA7B,EAFb,EADgB,CADkB,EAA/B,CAAP;;;;AAQD,GAhB4B;;;AAmB/B,OAAO,MAAMF,CAAC,GAAGrB,aAAa,CAACE,CAAD,CAAvB;;AAEPmB,CAAC,CAACG,IAAF,CAAO,4BAAP,EAAqCC,EAArC,CAAwCC,CAAC,IAAI;AAC3C,QAAMtB,cAAc,GAAGsB,CAAC,CAACpB,MAAF,CAASqB,oBAAT,EAAvB;AACA,QAAMC,UAAU,GAAGF,CAAC,CAACvB,eAAF,CAAkBC,cAAlB,CAAnB;AACAwB,EAAAA,UAAU,CAACC,aAAX,CAAyB,EAAET,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBC,CAAC,EAAE,CAAvB,EAAzB;AACAK,EAAAA,UAAU,CAACE,OAAX;AACA1B,EAAAA,cAAc,CAAC2B,MAAf;AACD,CAND;;AAQAV,CAAC,CAACG,IAAF,CAAO,uCAAP,EAAgDC,EAAhD,CAAmDC,CAAC,IAAI;AACtD,QAAMM,MAAM,GAAG,CAACC,MAAM,CAACC,gBAAR,EAA0BD,MAAM,CAACE,gBAAjC,CAAf;AACA,OAAK,MAAMC,KAAX,IAAoBJ,MAApB,EAA4B;AAC1B,UAAM5B,cAAc,GAAGsB,CAAC,CAACpB,MAAF,CAASqB,oBAAT,EAAvB;AACA,UAAMC,UAAU,GAAGF,CAAC,CAACvB,eAAF,CAAkBC,cAAlB,CAAnB;AACAwB,IAAAA,UAAU,CAACC,aAAX,CAAyB,EAAET,CAAC,EAAEgB,KAAL,EAAYf,CAAC,EAAEe,KAAf,EAAsBd,CAAC,EAAEc,KAAzB,EAAgCb,CAAC,EAAEa,KAAnC,EAAzB;AACAR,IAAAA,UAAU,CAACE,OAAX;AACA1B,IAAAA,cAAc,CAAC2B,MAAf;AACD;AACF,CATD","sourcesContent":["export const description = `\nsetBlendColor validation tests.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\n\nimport { ValidationTest } from './validation_test.js';\n\n// TODO: Move beginRenderPass to a Fixture class.\nclass F extends ValidationTest {\n  beginRenderPass(commandEncoder: GPUCommandEncoder): GPURenderPassEncoder {\n    const attachmentTexture = this.device.createTexture({\n      format: 'rgba8unorm',\n      size: { width: 16, height: 16, depth: 1 },\n      usage: GPUTextureUsage.OUTPUT_ATTACHMENT,\n    });\n\n    return commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: attachmentTexture.createView(),\n          loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n        },\n      ],\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('basic_use_of_setBlendColor').fn(t => {\n  const commandEncoder = t.device.createCommandEncoder();\n  const renderPass = t.beginRenderPass(commandEncoder);\n  renderPass.setBlendColor({ r: 0, g: 0, b: 0, a: 0 });\n  renderPass.endPass();\n  commandEncoder.finish();\n});\n\ng.test('setBlendColor_allows_any_number_value').fn(t => {\n  const values = [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER];\n  for (const value of values) {\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = t.beginRenderPass(commandEncoder);\n    renderPass.setBlendColor({ r: value, g: value, b: value, a: value });\n    renderPass.endPass();\n    commandEncoder.finish();\n  }\n});\n"],"file":"setBlendColor.spec.js"}