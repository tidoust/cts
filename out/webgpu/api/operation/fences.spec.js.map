{"version":3,"sources":["../../../../src/webgpu/api/operation/fences.spec.ts"],"names":["description","makeTestGroup","attemptGarbageCollection","raceWithRejectOnTimeout","GPUTest","g","test","fn","t","fence","queue","createFence","expect","getCompletedValue","initialValue","signal","onCompletion","promises","i","push","then","Promise","all","resolve","requestAnimationFrame","promise"],"mappings":"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","sourcesContent":["export const description = '';\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { attemptGarbageCollection } from '../../../common/framework/util/collect_garbage.js';\nimport { raceWithRejectOnTimeout } from '../../../common/framework/util/util.js';\nimport { GPUTest } from '../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('initial,no_descriptor').fn(t => {\n  const fence = t.queue.createFence();\n  t.expect(fence.getCompletedValue() === 0);\n});\n\ng.test('initial,empty_descriptor').fn(t => {\n  const fence = t.queue.createFence({});\n  t.expect(fence.getCompletedValue() === 0);\n});\n\ng.test('initial,descriptor_with_initialValue').fn(t => {\n  const fence = t.queue.createFence({ initialValue: 2 });\n  t.expect(fence.getCompletedValue() === 2);\n});\n\n// Promise resolves when onCompletion value is less than signal value.\ng.test('wait,less_than_signaled').fn(async t => {\n  const fence = t.queue.createFence();\n  t.queue.signal(fence, 2);\n  await fence.onCompletion(1);\n  t.expect(fence.getCompletedValue() === 2);\n});\n\n// Promise resolves when onCompletion value is equal to signal value.\ng.test('wait,equal_to_signaled').fn(async t => {\n  const fence = t.queue.createFence();\n  t.queue.signal(fence, 2);\n  await fence.onCompletion(2);\n  t.expect(fence.getCompletedValue() === 2);\n});\n\n// All promises resolve when signal is called once.\ng.test('wait,signaled_once').fn(async t => {\n  const fence = t.queue.createFence();\n  t.queue.signal(fence, 20);\n  const promises = [];\n  for (let i = 0; i <= 20; ++i) {\n    promises.push(\n      fence.onCompletion(i).then(() => {\n        t.expect(fence.getCompletedValue() >= i);\n      })\n    );\n  }\n  await Promise.all(promises);\n});\n\n// Promise resolves when signal is called multiple times.\ng.test('wait,signaled_multiple_times').fn(async t => {\n  const fence = t.queue.createFence();\n  t.queue.signal(fence, 1);\n  t.queue.signal(fence, 2);\n  await fence.onCompletion(2);\n  t.expect(fence.getCompletedValue() === 2);\n});\n\n// Promise resolves if fence has already completed.\ng.test('wait,already_completed').fn(async t => {\n  const fence = t.queue.createFence();\n  t.queue.signal(fence, 2);\n\n  // Wait for value to update.\n  while (fence.getCompletedValue() < 2) {\n    await new Promise(resolve => {\n      requestAnimationFrame(resolve);\n    });\n  }\n\n  t.expect(fence.getCompletedValue() === 2);\n\n  await fence.onCompletion(2);\n  t.expect(fence.getCompletedValue() === 2);\n});\n\n// Test many calls to signal and wait on fence values one at a time.\ng.test('wait,many,serially').fn(async t => {\n  const fence = t.queue.createFence();\n  for (let i = 1; i <= 20; ++i) {\n    t.queue.signal(fence, i);\n    await fence.onCompletion(i);\n    t.expect(fence.getCompletedValue() === i);\n  }\n});\n\n// Test many calls to signal and wait on all fence values.\ng.test('wait,many,parallel').fn(async t => {\n  const fence = t.queue.createFence();\n  const promises = [];\n  for (let i = 1; i <= 20; ++i) {\n    t.queue.signal(fence, i);\n    promises.push(\n      fence.onCompletion(i).then(() => {\n        t.expect(fence.getCompletedValue() >= i);\n      })\n    );\n  }\n  await Promise.all(promises);\n  t.expect(fence.getCompletedValue() === 20);\n});\n\n// Test onCompletion promise resolves within a time limit.\ng.test('wait,resolves_within_timeout').fn(t => {\n  const fence = t.queue.createFence();\n  t.queue.signal(fence, 2);\n\n  return raceWithRejectOnTimeout(\n    (async () => {\n      await fence.onCompletion(2);\n      t.expect(fence.getCompletedValue() === 2);\n    })(),\n    100,\n    'The fence has not been resolved within time limit.'\n  );\n});\n\n// Test dropping references to the fence and onCompletion promise does not crash.\ng.test('drop,fence_and_promise').fn(async t => {\n  {\n    const fence = t.queue.createFence();\n    t.queue.signal(fence, 2);\n    fence.onCompletion(2);\n  }\n  await attemptGarbageCollection();\n});\n\n// Test dropping references to the fence and holding the promise does not crash.\ng.test('drop,promise').fn(async t => {\n  let promise;\n  {\n    const fence = t.queue.createFence();\n    t.queue.signal(fence, 2);\n    promise = fence.onCompletion(2);\n  }\n  await attemptGarbageCollection();\n  await promise;\n});\n"],"file":"fences.spec.js"}