{"version":3,"sources":["../../../../../src/webgpu/api/operation/command_buffer/copies.spec.ts"],"names":["description","makeTestGroup","GPUTest","g","test","fn","t","data","Uint32Array","src","device","createBuffer","mappedAtCreation","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","getMappedRange","set","unmap","dst","encoder","createCommandEncoder","copyBufferToBuffer","defaultQueue","submit","finish","expectContents","mid","createTexture","width","height","depth","format","GPUTextureUsage","copyBufferToTexture","buffer","bytesPerRow","texture","mipLevel","origin","x","y","z","copyTextureToBuffer","midDesc","mid1","mid2","copyTextureToTexture"],"mappings":"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","sourcesContent":["export const description = `\ncopy{Buffer,Texture}To{Buffer,Texture} tests.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('b2b').fn(async t => {\n  const data = new Uint32Array([0x01020304]);\n\n  const src = t.device.createBuffer({\n    mappedAtCreation: true,\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n  new Uint32Array(src.getMappedRange()).set(data);\n  src.unmap();\n\n  const dst = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  encoder.copyBufferToBuffer(src, 0, dst, 0, 4);\n  t.device.defaultQueue.submit([encoder.finish()]);\n\n  t.expectContents(dst, data);\n});\n\ng.test('b2t2b').fn(async t => {\n  const data = new Uint32Array([0x01020304]);\n\n  const src = t.device.createBuffer({\n    mappedAtCreation: true,\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n  new Uint32Array(src.getMappedRange()).set(data);\n  src.unmap();\n\n  const dst = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const mid = t.device.createTexture({\n    size: { width: 1, height: 1, depth: 1 },\n    format: 'rgba8uint',\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  encoder.copyBufferToTexture(\n    { buffer: src, bytesPerRow: 256 },\n    { texture: mid, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { width: 1, height: 1, depth: 1 }\n  );\n  encoder.copyTextureToBuffer(\n    { texture: mid, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { buffer: dst, bytesPerRow: 256 },\n    { width: 1, height: 1, depth: 1 }\n  );\n  t.device.defaultQueue.submit([encoder.finish()]);\n\n  t.expectContents(dst, data);\n});\n\ng.test('b2t2t2b').fn(async t => {\n  const data = new Uint32Array([0x01020304]);\n\n  const src = t.device.createBuffer({\n    mappedAtCreation: true,\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n  new Uint32Array(src.getMappedRange()).set(data);\n  src.unmap();\n\n  const dst = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const midDesc: GPUTextureDescriptor = {\n    size: { width: 1, height: 1, depth: 1 },\n    format: 'rgba8uint',\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n  };\n  const mid1 = t.device.createTexture(midDesc);\n  const mid2 = t.device.createTexture(midDesc);\n\n  const encoder = t.device.createCommandEncoder();\n  encoder.copyBufferToTexture(\n    { buffer: src, bytesPerRow: 256 },\n    { texture: mid1, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { width: 1, height: 1, depth: 1 }\n  );\n  encoder.copyTextureToTexture(\n    { texture: mid1, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { texture: mid2, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { width: 1, height: 1, depth: 1 }\n  );\n  encoder.copyTextureToBuffer(\n    { texture: mid2, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { buffer: dst, bytesPerRow: 256 },\n    { width: 1, height: 1, depth: 1 }\n  );\n  t.device.defaultQueue.submit([encoder.finish()]);\n\n  t.expectContents(dst, data);\n});\n"],"file":"copies.spec.js"}