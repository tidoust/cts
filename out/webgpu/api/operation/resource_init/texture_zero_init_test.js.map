{"version":3,"sources":["../../../../../src/webgpu/api/operation/resource_init/texture_zero_init_test.ts"],"names":["params","poptions","pbool","assert","unreachable","kTextureAspects","kUncompressedTextureFormatInfo","kUncompressedTextureFormats","GPUTest","createTextureUploadBuffer","SubresourceRange","getTexelDataRepresentation","UninitializeMethod","kUninitializeMethods","Object","keys","ReadMethod","kMipLevelCounts","kUninitializedMipRangesToTest","begin","end","kSampleCounts","kUninitializedSliceRangesToTest","kCreationSizes","dimension","sliceCount","InitializedState","initializedStateAsFloat","state","Zero","Canary","initializedStateAsUint","initializedStateAsSint","initializedStateAsColor","format","value","indexOf","initializedStateAsDepth","initializedStateAsStencil","getRequiredTextureUsage","sampleCount","uninitializeMethod","readMethod","usage","GPUTextureUsage","COPY_DST","Creation","StoreOpClear","OUTPUT_ATTACHMENT","CopyToBuffer","CopyToTexture","COPY_SRC","Sample","SAMPLED","Storage","STORAGE","DepthTest","StencilTest","ColorBlending","copyDst","renderable","TextureZeroInitTest","constructor","rec","stateToTexelComponents","R","G","B","A","Depth","Stencil","textureWidth","width","mipLevelCount","nonPowerOfTwo","textureHeight","height","iterateUninitializedSubresources","mipRange","sliceRange","iterateInitializedSubresources","uninitialized","Array","level","length","subresources","slice","each","count","generateTextureViewDescriptorsForRendering","aspect","subresourceRange","viewDescriptor","undefined","baseMipLevel","baseArrayLayer","arrayLayerCount","initializeWithStoreOp","texture","commandEncoder","device","createCommandEncoder","color","beginRenderPass","colorAttachments","attachment","createView","storeOp","loadValue","endPass","depthStencilAttachment","depthStoreOp","depthLoadValue","stencilStoreOp","stencilLoadValue","queue","submit","finish","initializeWithCopy","firstSubresource","next","largestWidth","largestHeight","texelData","Uint8Array","getBytes","buffer","bytesPerRow","rowsPerImage","copyBufferToTexture","mipLevel","origin","x","y","z","depth","destroy","initializeTexture","discardTexture","desc","generateParams","readMethods","combine","unless","stencil","info","filter","storage","run","createTexture","size","checkContents"],"mappings":"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","sourcesContent":["import { TestCaseRecorder } from '../../../../common/framework/logging/test_case_recorder.js';\nimport { params, poptions, pbool } from '../../../../common/framework/params_builder.js';\nimport { CaseParams } from '../../../../common/framework/params_utils.js';\nimport { assert, unreachable } from '../../../../common/framework/util/util.js';\nimport {\n  kTextureAspects,\n  kUncompressedTextureFormatInfo,\n  kUncompressedTextureFormats,\n  EncodableTextureFormat,\n  UncompressedTextureFormat,\n} from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { createTextureUploadBuffer } from '../../../util/texture/layout.js';\nimport { BeginEndRange, SubresourceRange } from '../../../util/texture/subresource.js';\nimport { PerTexelComponent, getTexelDataRepresentation } from '../../../util/texture/texelData.js';\n\nenum UninitializeMethod {\n  Creation = 'Creation', // The texture was just created. It is uninitialized.\n  StoreOpClear = 'StoreOpClear', // The texture was rendered to with GPUStoreOp \"clear\"\n}\nconst kUninitializeMethods = Object.keys(UninitializeMethod) as UninitializeMethod[];\n\nexport enum ReadMethod {\n  Sample = 'Sample', // The texture is sampled from\n  CopyToBuffer = 'CopyToBuffer', // The texture is copied to a buffer\n  CopyToTexture = 'CopyToTexture', // The texture is copied to another texture\n  DepthTest = 'DepthTest', // The texture is read as a depth buffer\n  StencilTest = 'StencilTest', // The texture is read as a stencil buffer\n  ColorBlending = 'ColorBlending', // Read the texture by blending as a color attachment\n  Storage = 'Storage', // Read the texture as a storage texture\n}\n\n// Test with these mip level counts\ntype MipLevels = 1 | 5;\nconst kMipLevelCounts: MipLevels[] = [1, 5];\n\n// For each mip level count, define the mip ranges to leave uninitialized.\nconst kUninitializedMipRangesToTest: { [k in MipLevels]: BeginEndRange[] } = {\n  1: [{ begin: 0, end: 1 }], // Test the only mip\n  5: [\n    { begin: 0, end: 2 },\n    { begin: 3, end: 4 },\n  ], // Test a range and a single mip\n};\n\n// Test with these sample counts.\ntype SampleCounts = 1 | 4;\nconst kSampleCounts: SampleCounts[] = [1, 4];\n\n// Test with these slice counts. This means the depth of a 3d texture or the number\n// or layers in a 2D or a 1D texture array.\ntype SliceCounts = 1 | 7;\n\n// For each slice count, define the slices to leave uninitialized.\nconst kUninitializedSliceRangesToTest: { [k in SliceCounts]: BeginEndRange[] } = {\n  1: [{ begin: 0, end: 1 }], // Test the only slice\n  7: [\n    { begin: 2, end: 4 },\n    { begin: 6, end: 7 },\n  ], // Test a range and a single slice\n};\n\n// Test with these combinations of texture dimension and sliceCount.\nconst kCreationSizes: Array<{\n  dimension: GPUTextureDimension;\n  sliceCount: SliceCounts;\n}> = [\n  // { dimension: '1d', sliceCount: 7 }, // TODO: 1d textures\n  { dimension: '2d', sliceCount: 1 }, // 2d textures\n  { dimension: '2d', sliceCount: 7 }, // 2d array textures\n  // { dimension: '3d', sliceCount: 7 }, // TODO: 3d textures\n];\n\n// Enums to abstract over color / depth / stencil values in textures. Depending on the texture format,\n// the data for each value may have a different representation. These enums are converted to a\n// representation such that their values can be compared. ex.) An integer is needed to upload to an\n// unsigned normalized format, but its value is read as a float in the shader.\nexport const enum InitializedState {\n  Canary, // Set on initialized subresources. It should stay the same. On discarded resources, we should observe zero.\n  Zero, // We check that uninitialized subresources are in this state when read back.\n}\n\nexport function initializedStateAsFloat(state: InitializedState): number {\n  switch (state) {\n    case InitializedState.Zero:\n      return 0;\n    case InitializedState.Canary:\n      return 1;\n    default:\n      unreachable();\n  }\n}\n\nexport function initializedStateAsUint(state: InitializedState): number {\n  switch (state) {\n    case InitializedState.Zero:\n      return 0;\n    case InitializedState.Canary:\n      return 255;\n    default:\n      unreachable();\n  }\n}\n\nexport function initializedStateAsSint(state: InitializedState): number {\n  switch (state) {\n    case InitializedState.Zero:\n      return 0;\n    case InitializedState.Canary:\n      return -1;\n    default:\n      unreachable();\n  }\n}\n\nexport function initializedStateAsColor(\n  state: InitializedState,\n  format: GPUTextureFormat\n): [number, number, number, number] {\n  let value;\n  if (format.indexOf('uint') !== -1) {\n    value = initializedStateAsUint(state);\n  } else if (format.indexOf('sint') !== -1) {\n    value = initializedStateAsSint(state);\n  } else {\n    value = initializedStateAsFloat(state);\n  }\n  return [value, value, value, value];\n}\n\nexport function initializedStateAsDepth(state: InitializedState): number {\n  switch (state) {\n    case InitializedState.Zero:\n      return 0;\n    case InitializedState.Canary:\n      return 1;\n    default:\n      unreachable();\n  }\n}\n\nexport function initializedStateAsStencil(state: InitializedState): number {\n  switch (state) {\n    case InitializedState.Zero:\n      return 0;\n    case InitializedState.Canary:\n      return 42;\n    default:\n      unreachable();\n  }\n}\n\ninterface TestParams {\n  format: EncodableTextureFormat;\n  aspect: GPUTextureAspect;\n  dimension: GPUTextureDimension;\n  sliceCount: SliceCounts;\n  mipLevelCount: MipLevels;\n  sampleCount: SampleCounts;\n  uninitializeMethod: UninitializeMethod;\n  readMethod: ReadMethod;\n  nonPowerOfTwo: boolean;\n}\n\nfunction getRequiredTextureUsage(\n  format: UncompressedTextureFormat,\n  sampleCount: SampleCounts,\n  uninitializeMethod: UninitializeMethod,\n  readMethod: ReadMethod\n): GPUTextureUsageFlags {\n  let usage: GPUTextureUsageFlags = GPUTextureUsage.COPY_DST;\n\n  switch (uninitializeMethod) {\n    case UninitializeMethod.Creation:\n      break;\n    case UninitializeMethod.StoreOpClear:\n      usage |= GPUTextureUsage.OUTPUT_ATTACHMENT;\n      break;\n    default:\n      unreachable();\n  }\n\n  switch (readMethod) {\n    case ReadMethod.CopyToBuffer:\n    case ReadMethod.CopyToTexture:\n      usage |= GPUTextureUsage.COPY_SRC;\n      break;\n    case ReadMethod.Sample:\n      usage |= GPUTextureUsage.SAMPLED;\n      break;\n    case ReadMethod.Storage:\n      usage |= GPUTextureUsage.STORAGE;\n      break;\n    case ReadMethod.DepthTest:\n    case ReadMethod.StencilTest:\n    case ReadMethod.ColorBlending:\n      usage |= GPUTextureUsage.OUTPUT_ATTACHMENT;\n      break;\n    default:\n      unreachable();\n  }\n\n  if (sampleCount > 1) {\n    // Copies to multisampled textures are not allowed. We need OutputAttachment to initialize\n    // canary data in multisampled textures.\n    usage |= GPUTextureUsage.OUTPUT_ATTACHMENT;\n  }\n\n  if (!kUncompressedTextureFormatInfo[format].copyDst) {\n    // Copies are not possible. We need OutputAttachment to initialize\n    // canary data.\n    assert(kUncompressedTextureFormatInfo[format].renderable);\n    usage |= GPUTextureUsage.OUTPUT_ATTACHMENT;\n  }\n\n  return usage;\n}\n\nexport abstract class TextureZeroInitTest extends GPUTest {\n  protected stateToTexelComponents: { [k in InitializedState]: PerTexelComponent<number> };\n\n  constructor(rec: TestCaseRecorder, params: CaseParams) {\n    super(rec, params);\n\n    const stateToTexelComponents = (state: InitializedState) => {\n      const [R, G, B, A] = initializedStateAsColor(state, this.params.format);\n      return {\n        R,\n        G,\n        B,\n        A,\n        Depth: initializedStateAsDepth(state),\n        Stencil: initializedStateAsStencil(state),\n      };\n    };\n\n    this.stateToTexelComponents = {\n      [InitializedState.Zero]: stateToTexelComponents(InitializedState.Zero),\n      [InitializedState.Canary]: stateToTexelComponents(InitializedState.Canary),\n    };\n  }\n\n  get params(): TestParams {\n    return super.params as TestParams;\n  }\n\n  get textureWidth(): number {\n    let width = 1 << this.params.mipLevelCount;\n    if (this.params.nonPowerOfTwo) {\n      width = 2 * width - 1;\n    }\n    return width;\n  }\n\n  get textureHeight(): number {\n    let height = 1 << this.params.mipLevelCount;\n    if (this.params.nonPowerOfTwo) {\n      height = 2 * height - 1;\n    }\n    return height;\n  }\n\n  // Used to iterate subresources and check that their uninitialized contents are zero when accessed\n  *iterateUninitializedSubresources(): Generator<SubresourceRange> {\n    for (const mipRange of kUninitializedMipRangesToTest[this.params.mipLevelCount]) {\n      for (const sliceRange of kUninitializedSliceRangesToTest[this.params.sliceCount]) {\n        yield new SubresourceRange({ mipRange, sliceRange });\n      }\n    }\n  }\n\n  // Used to iterate and initialize other subresources not checked for zero-initialization.\n  // Zero-initialization of uninitialized subresources should not have side effects on already\n  // initialized subresources.\n  *iterateInitializedSubresources(): Generator<SubresourceRange> {\n    const uninitialized: boolean[][] = new Array(this.params.mipLevelCount);\n    for (let level = 0; level < uninitialized.length; ++level) {\n      uninitialized[level] = new Array(this.params.sliceCount);\n    }\n    for (const subresources of this.iterateUninitializedSubresources()) {\n      for (const { level, slice } of subresources.each()) {\n        uninitialized[level][slice] = true;\n      }\n    }\n    for (let level = 0; level < uninitialized.length; ++level) {\n      for (let slice = 0; slice < uninitialized[level].length; ++slice) {\n        if (!uninitialized[level][slice]) {\n          yield new SubresourceRange({\n            mipRange: { begin: level, count: 1 },\n            sliceRange: { begin: slice, count: 1 },\n          });\n        }\n      }\n    }\n  }\n\n  *generateTextureViewDescriptorsForRendering(\n    aspect: GPUTextureAspect,\n    subresourceRange?: SubresourceRange\n  ): Generator<GPUTextureViewDescriptor> {\n    const viewDescriptor: GPUTextureViewDescriptor = {\n      dimension: '2d',\n      aspect,\n    };\n\n    if (subresourceRange === undefined) {\n      return viewDescriptor;\n    }\n\n    for (const { level, slice } of subresourceRange.each()) {\n      yield {\n        ...viewDescriptor,\n        baseMipLevel: level,\n        mipLevelCount: 1,\n        baseArrayLayer: slice,\n        arrayLayerCount: 1,\n      };\n    }\n  }\n\n  abstract checkContents(\n    texture: GPUTexture,\n    state: InitializedState,\n    subresourceRange: SubresourceRange\n  ): void;\n\n  private initializeWithStoreOp(\n    state: InitializedState,\n    texture: GPUTexture,\n    subresourceRange?: SubresourceRange\n  ): void {\n    const commandEncoder = this.device.createCommandEncoder();\n    for (const viewDescriptor of this.generateTextureViewDescriptorsForRendering(\n      this.params.aspect,\n      subresourceRange\n    )) {\n      if (kUncompressedTextureFormatInfo[this.params.format].color) {\n        commandEncoder\n          .beginRenderPass({\n            colorAttachments: [\n              {\n                attachment: texture.createView(viewDescriptor),\n                storeOp: 'store',\n                loadValue: initializedStateAsColor(state, this.params.format),\n              },\n            ],\n          })\n          .endPass();\n      } else {\n        commandEncoder\n          .beginRenderPass({\n            colorAttachments: [],\n            depthStencilAttachment: {\n              attachment: texture.createView(viewDescriptor),\n              depthStoreOp: 'store',\n              depthLoadValue: initializedStateAsDepth(state),\n              stencilStoreOp: 'store',\n              stencilLoadValue: initializedStateAsStencil(state),\n            },\n          })\n          .endPass();\n      }\n    }\n    this.queue.submit([commandEncoder.finish()]);\n  }\n\n  private initializeWithCopy(\n    texture: GPUTexture,\n    state: InitializedState,\n    subresourceRange: SubresourceRange\n  ): void {\n    if (this.params.dimension === '1d' || this.params.dimension === '3d') {\n      // TODO: https://github.com/gpuweb/gpuweb/issues/69\n      // Copies with 1D and 3D textures are not yet specified\n      unreachable();\n    }\n\n    const firstSubresource = subresourceRange.each().next().value;\n    assert(typeof firstSubresource !== 'undefined');\n\n    const largestWidth = this.textureWidth >> firstSubresource.level;\n    const largestHeight = this.textureHeight >> firstSubresource.level;\n\n    const texelData = new Uint8Array(\n      getTexelDataRepresentation(this.params.format).getBytes(this.stateToTexelComponents[state])\n    );\n    const { buffer, bytesPerRow, rowsPerImage } = createTextureUploadBuffer(\n      texelData,\n      this.device,\n      this.params.format,\n      this.params.dimension,\n      [largestWidth, largestHeight, 1]\n    );\n\n    const commandEncoder = this.device.createCommandEncoder();\n\n    for (const { level, slice } of subresourceRange.each()) {\n      const width = this.textureWidth >> level;\n      const height = this.textureHeight >> level;\n\n      commandEncoder.copyBufferToTexture(\n        {\n          buffer,\n          bytesPerRow,\n          rowsPerImage,\n        },\n        { texture, mipLevel: level, origin: { x: 0, y: 0, z: slice } },\n        { width, height, depth: 1 }\n      );\n    }\n    this.queue.submit([commandEncoder.finish()]);\n    buffer.destroy();\n  }\n\n  initializeTexture(\n    texture: GPUTexture,\n    state: InitializedState,\n    subresourceRange: SubresourceRange\n  ): void {\n    if (\n      this.params.sampleCount > 1 ||\n      !kUncompressedTextureFormatInfo[this.params.format].copyDst\n    ) {\n      // Copies to multisampled textures not yet specified.\n      // Use a storeOp for now.\n      assert(kUncompressedTextureFormatInfo[this.params.format].renderable);\n      this.initializeWithStoreOp(state, texture, subresourceRange);\n    } else {\n      this.initializeWithCopy(texture, state, subresourceRange);\n    }\n  }\n\n  discardTexture(texture: GPUTexture, subresourceRange: SubresourceRange): void {\n    const commandEncoder = this.device.createCommandEncoder();\n\n    for (const desc of this.generateTextureViewDescriptorsForRendering(\n      this.params.aspect,\n      subresourceRange\n    )) {\n      if (kUncompressedTextureFormatInfo[this.params.format].color) {\n        commandEncoder\n          .beginRenderPass({\n            colorAttachments: [\n              {\n                attachment: texture.createView(desc),\n                storeOp: 'clear',\n                loadValue: 'load',\n              },\n            ],\n          })\n          .endPass();\n      } else {\n        commandEncoder\n          .beginRenderPass({\n            colorAttachments: [],\n            depthStencilAttachment: {\n              attachment: texture.createView(desc),\n              depthStoreOp: 'clear',\n              depthLoadValue: 'load',\n              stencilStoreOp: 'clear',\n              stencilLoadValue: 'load',\n            },\n          })\n          .endPass();\n      }\n    }\n    this.queue.submit([commandEncoder.finish()]);\n  }\n\n  static generateParams(readMethods: ReadMethod[]) {\n    return (\n      // TODO: Consider making a list of \"valid\" texture descriptors in capability_info.\n      params()\n        .combine(poptions('format', kUncompressedTextureFormats))\n        .combine(poptions('aspect', kTextureAspects))\n        .unless(\n          ({ format, aspect }) =>\n            (aspect === 'depth-only' && !kUncompressedTextureFormatInfo[format].depth) ||\n            (aspect === 'stencil-only' && !kUncompressedTextureFormatInfo[format].stencil)\n        )\n        .combine(poptions('mipLevelCount', kMipLevelCounts))\n        .combine(poptions('sampleCount', kSampleCounts))\n        // Multisampled textures may only have one mip\n        .unless(({ sampleCount, mipLevelCount }) => sampleCount > 1 && mipLevelCount > 1)\n        .combine(poptions('uninitializeMethod', kUninitializeMethods))\n        .combine(poptions('readMethod', readMethods))\n        .unless(\n          ({ readMethod, format }) =>\n            // It doesn't make sense to copy from a packed depth format.\n            // This is not specified yet, but it will probably be disallowed as the bits may\n            // be vendor-specific.\n            // TODO: Test copying out of the stencil aspect.\n            (readMethod === ReadMethod.CopyToBuffer || readMethod === ReadMethod.CopyToTexture) &&\n            (format === 'depth24plus' || format === 'depth24plus-stencil8')\n        )\n        .unless(({ readMethod, format }) => {\n          const info = kUncompressedTextureFormatInfo[format];\n          return (\n            (readMethod === ReadMethod.DepthTest && !info.depth) ||\n            (readMethod === ReadMethod.StencilTest && !info.stencil) ||\n            (readMethod === ReadMethod.ColorBlending && !info.color) ||\n            // TODO: Test with depth sampling\n            (readMethod === ReadMethod.Sample && info.depth)\n          );\n        })\n        .unless(\n          ({ readMethod, sampleCount }) =>\n            // We can only read from multisampled textures by sampling.\n            sampleCount > 1 &&\n            (readMethod === ReadMethod.CopyToBuffer || readMethod === ReadMethod.CopyToTexture)\n        )\n        .combine(kCreationSizes)\n        // Multisampled 3D / 2D array textures not supported.\n        .unless(({ sampleCount, sliceCount }) => sampleCount > 1 && sliceCount > 1)\n        .filter(({ format, sampleCount, uninitializeMethod, readMethod }) => {\n          const usage = getRequiredTextureUsage(\n            format,\n            sampleCount,\n            uninitializeMethod,\n            readMethod\n          );\n          const info = kUncompressedTextureFormatInfo[format];\n\n          if (usage & GPUTextureUsage.OUTPUT_ATTACHMENT && !info.renderable) {\n            return false;\n          }\n\n          if (usage & GPUTextureUsage.STORAGE && !info.storage) {\n            return false;\n          }\n\n          return true;\n        })\n        .combine(pbool('nonPowerOfTwo'))\n    );\n  }\n\n  run(): void {\n    const {\n      format,\n      dimension,\n      mipLevelCount,\n      sliceCount,\n      sampleCount,\n      uninitializeMethod,\n      readMethod,\n    } = this.params;\n\n    const usage = getRequiredTextureUsage(format, sampleCount, uninitializeMethod, readMethod);\n\n    const texture = this.device.createTexture({\n      size: [this.textureWidth, this.textureHeight, sliceCount],\n      format,\n      dimension,\n      usage,\n      mipLevelCount,\n      sampleCount,\n    });\n\n    // Initialize some subresources with canary values\n    for (const subresourceRange of this.iterateInitializedSubresources()) {\n      this.initializeTexture(texture, InitializedState.Canary, subresourceRange);\n    }\n\n    switch (uninitializeMethod) {\n      case UninitializeMethod.Creation:\n        break;\n      case UninitializeMethod.StoreOpClear:\n        // Initialize the rest of the resources.\n        for (const subresourceRange of this.iterateUninitializedSubresources()) {\n          this.initializeTexture(texture, InitializedState.Canary, subresourceRange);\n        }\n        // Then use a store op to discard their contents.\n        for (const subresourceRange of this.iterateUninitializedSubresources()) {\n          this.discardTexture(texture, subresourceRange);\n        }\n        break;\n      default:\n        unreachable();\n    }\n\n    // Check that all uninitialized resources are zero.\n    for (const subresourceRange of this.iterateUninitializedSubresources()) {\n      this.checkContents(texture, InitializedState.Zero, subresourceRange);\n    }\n\n    // Check the all other resources are unchanged.\n    for (const subresourceRange of this.iterateInitializedSubresources()) {\n      this.checkContents(texture, InitializedState.Canary, subresourceRange);\n    }\n  }\n}\n"],"file":"texture_zero_init_test.js"}