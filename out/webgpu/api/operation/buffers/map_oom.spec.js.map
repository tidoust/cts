{"version":3,"sources":["../../../../../src/webgpu/api/operation/buffers/map_oom.spec.ts"],"names":["description","poptions","params","pbool","makeTestGroup","kBufferUsages","GPUTest","MAX_ALIGNED_SAFE_INTEGER","Number","MAX_SAFE_INTEGER","g","test","combine","fn","t","oom","write","size","buffer","expectGPUError","device","createBuffer","usage","GPUBufferUsage","MAP_WRITE","MAP_READ","promise","mapAsync","GPUMapMode","WRITE","READ","shouldReject","arraybuffer","getMappedRange","expect","byteLength","unmap","mappedAtCreation","f","shouldThrow","mapping"],"mappings":"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","sourcesContent":["export const description = '';\n\nimport { poptions, params, pbool } from '../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kBufferUsages } from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\n// A multiple of 8 guaranteed to be way too large to allocate (just under 8 pebibytes).\n// (Note this is likely to exceed limitations other than just the system's\n// physical memory - so may test codepaths other than \"true\" OOM.)\nconst MAX_ALIGNED_SAFE_INTEGER = Number.MAX_SAFE_INTEGER - 7;\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('mapAsync')\n  .params(\n    params()\n      .combine(pbool('oom')) //\n      .combine(pbool('write'))\n  )\n  .fn(async t => {\n    const { oom, write } = t.params;\n    const size = oom ? MAX_ALIGNED_SAFE_INTEGER : 16;\n\n    const buffer = t.expectGPUError(\n      'out-of-memory',\n      () =>\n        t.device.createBuffer({\n          size,\n          usage: write ? GPUBufferUsage.MAP_WRITE : GPUBufferUsage.MAP_READ,\n        }),\n      oom\n    );\n    const promise = t.expectGPUError(\n      'validation', // Should be a validation error since the buffer is invalid.\n      () => buffer.mapAsync(write ? GPUMapMode.WRITE : GPUMapMode.READ),\n      oom\n    );\n\n    if (oom) {\n      // Should also reject in addition to the validation error.\n      t.shouldReject('OperationError', promise);\n    } else {\n      await promise;\n      const arraybuffer = buffer.getMappedRange();\n      t.expect(arraybuffer.byteLength === size);\n      buffer.unmap();\n      t.expect(arraybuffer.byteLength === 0);\n    }\n  });\n\ng.test('mappedAtCreation')\n  .params(\n    params()\n      .combine(pbool('oom')) //\n      .combine(poptions('usage', kBufferUsages))\n  )\n  .fn(async t => {\n    const { oom, usage } = t.params;\n    const size = oom ? MAX_ALIGNED_SAFE_INTEGER : 16;\n\n    const buffer = t.expectGPUError(\n      'out-of-memory',\n      () => t.device.createBuffer({ mappedAtCreation: true, size, usage }),\n      oom\n    );\n\n    const f = () => buffer.getMappedRange(0, size);\n\n    if (oom) {\n      t.shouldThrow('RangeError', f);\n    } else {\n      f();\n    }\n  });\n\ng.test('mappedAtCreation,smaller_getMappedRange')\n  .params(poptions('usage', kBufferUsages))\n  .fn(async t => {\n    const { usage } = t.params;\n    const size = MAX_ALIGNED_SAFE_INTEGER;\n\n    const buffer = t.expectGPUError('out-of-memory', () =>\n      t.device.createBuffer({ mappedAtCreation: true, size, usage })\n    );\n\n    // Smaller range inside a too-big mapping\n    const mapping = buffer.getMappedRange(0, 16);\n    t.expect(mapping.byteLength === 16);\n    buffer.unmap();\n    t.expect(mapping.byteLength === 0);\n  });\n"],"file":"map_oom.spec.js"}