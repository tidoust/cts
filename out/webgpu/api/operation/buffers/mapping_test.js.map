{"version":3,"sources":["../../../../../src/webgpu/api/operation/buffers/mapping_test.ts"],"names":["assert","GPUTest","MappingTest","checkMapWrite","buffer","offset","mappedContents","size","checkMapWriteZeroed","mappedView","Uint32Array","expected","ArrayBuffer","byteLength","i","length","unmap","expectContents","arrayBuffer","expectedSize","expect","view","Uint8Array","expectZero","actual","fail"],"mappings":";;GAAA,SAASA,MAAT,QAAuB,2CAAvB,CACA,SAASC,OAAT,QAAwB,sBAAxB;AAEA,OAAO,MAAMC,WAAN,SAA0BD,OAA1B,CAAkC;AACvCE,EAAAA,aAAa;AACXC,EAAAA,MADW;AAEXC,EAAAA,MAFW;AAGXC,EAAAA,cAHW;AAIXC,EAAAA,IAJW;AAKL;AACN,SAAKC,mBAAL,CAAyBF,cAAzB,EAAyCC,IAAzC;;AAEA,UAAME,UAAU,GAAG,IAAIC,WAAJ,CAAgBJ,cAAhB,CAAnB;AACA,UAAMK,QAAQ,GAAG,IAAID,WAAJ,CAAgB,IAAIE,WAAJ,CAAgBL,IAAhB,CAAhB,CAAjB;AACAP,IAAAA,MAAM,CAACS,UAAU,CAACI,UAAX,KAA0BN,IAA3B,CAAN;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,UAAU,CAACM,MAA/B,EAAuC,EAAED,CAAzC,EAA4C;AAC1CL,MAAAA,UAAU,CAACK,CAAD,CAAV,GAAgBH,QAAQ,CAACG,CAAD,CAAR,GAAcA,CAAC,GAAG,CAAlC;AACD;AACDV,IAAAA,MAAM,CAACY,KAAP;;AAEA,SAAKC,cAAL,CAAoBb,MAApB,EAA4BO,QAA5B,EAAsCN,MAAtC;AACD;;AAEDG,EAAAA,mBAAmB,CAACU,WAAD,EAA2BC,YAA3B,EAAuD;AACxE,SAAKC,MAAL,CAAYF,WAAW,CAACL,UAAZ,KAA2BM,YAAvC;AACA,UAAME,IAAI,GAAG,IAAIC,UAAJ,CAAeJ,WAAf,CAAb;AACA,SAAKK,UAAL,CAAgBF,IAAhB;AACD;;AAEDE,EAAAA,UAAU,CAACC,MAAD,EAA2B;AACnC,UAAMjB,IAAI,GAAGiB,MAAM,CAACX,UAApB;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,IAApB,EAA0B,EAAEO,CAA5B,EAA+B;AAC7B,UAAIU,MAAM,CAACV,CAAD,CAAN,KAAc,CAAlB,EAAqB;AACnB,aAAKW,IAAL,CAAW,OAAMX,CAAE,yBAAwBU,MAAM,CAACV,CAAD,CAAI,EAArD;AACA;AACD;AACF;AACF,GAlCsC","sourcesContent":["import { assert } from '../../../../common/framework/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nexport class MappingTest extends GPUTest {\n  checkMapWrite(\n    buffer: GPUBuffer,\n    offset: number,\n    mappedContents: ArrayBuffer,\n    size: number\n  ): void {\n    this.checkMapWriteZeroed(mappedContents, size);\n\n    const mappedView = new Uint32Array(mappedContents);\n    const expected = new Uint32Array(new ArrayBuffer(size));\n    assert(mappedView.byteLength === size);\n    for (let i = 0; i < mappedView.length; ++i) {\n      mappedView[i] = expected[i] = i + 1;\n    }\n    buffer.unmap();\n\n    this.expectContents(buffer, expected, offset);\n  }\n\n  checkMapWriteZeroed(arrayBuffer: ArrayBuffer, expectedSize: number): void {\n    this.expect(arrayBuffer.byteLength === expectedSize);\n    const view = new Uint8Array(arrayBuffer);\n    this.expectZero(view);\n  }\n\n  expectZero(actual: Uint8Array): void {\n    const size = actual.byteLength;\n    for (let i = 0; i < size; ++i) {\n      if (actual[i] !== 0) {\n        this.fail(`at [${i}], expected zero, got ${actual[i]}`);\n        break;\n      }\n    }\n  }\n}\n"],"file":"mapping_test.js"}