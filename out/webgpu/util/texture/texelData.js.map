{"version":3,"sources":["../../../../src/webgpu/util/texture/texelData.ts"],"names":["assert","unreachable","kUncompressedTextureFormatInfo","assertInIntegerRange","float32ToFloatBits","floatAsNormalizedInteger","gammaCompress","TexelComponent","TexelWriteType","kR","R","kRG","G","kRGB","B","kRGBA","A","kBGRA","unorm","bitLength","n","value","type","Uint","snorm","Sint","uint","sint","unorm2","write","unorm8","unorm10","snorm8","uint8","uint16","uint32","sint8","sint16","sint32","float10","float11","float16","float32","Math","fround","Float","repeatComponents","componentOrder","perComponentInfo","componentInfo","reduce","acc","curr","Object","assign","kRepresentationInfo","sRGB","Depth","Stencil","TexelDataRepresentationImpl","constructor","format","totalBitLength","setComponent","data","component","componentIndex","indexOf","bitOffset","slice","byteOffset","floor","byteLength","ceil","DataView","setFloat32","isGPULittleEndian","setInt8","setInt16","setInt32","setUint8","setUint16","setUint32","view","currentValue","getUint32","mask","bitsToClearRight","bitsToClearLeft","newValue","getBytes","components","undefined","bytesPerBlock","ArrayBuffer","c","componentValue","kRepresentationCache","Map","getTexelDataRepresentation","has","set","get"],"mappings":"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","sourcesContent":["import { assert, unreachable } from '../../../common/framework/util/util.js';\nimport {\n  kUncompressedTextureFormatInfo,\n  UncompressedTextureFormat,\n} from '../../capability_info.js';\nimport {\n  assertInIntegerRange,\n  float32ToFloatBits,\n  floatAsNormalizedInteger,\n  gammaCompress,\n} from '../conversion.js';\n\nexport const enum TexelComponent {\n  R = 'R',\n  G = 'G',\n  B = 'B',\n  A = 'A',\n  Depth = 'Depth',\n  Stencil = 'Stencil',\n}\n\nexport type PerTexelComponent<T> = { [c in TexelComponent]?: T };\n\nconst enum TexelWriteType {\n  Sint,\n  Uint,\n  Float,\n}\n\n// Function to convert a value into a texel value. It returns the converted value\n// and the type of the converted value. For example, conversion may convert:\n//  - floats to unsigned normalized integers\n//  - floats to half floats, interpreted as uint16 bits\ntype TexelWriteFn = (value: number) => { value: number; type: TexelWriteType };\n\ninterface SingleComponentInfo {\n  write: TexelWriteFn;\n  bitLength: number;\n}\n\ntype TexelComponentInfo = PerTexelComponent<null | SingleComponentInfo>;\n\nconst kR = [TexelComponent.R];\nconst kRG = [TexelComponent.R, TexelComponent.G];\nconst kRGB = [TexelComponent.R, TexelComponent.G, TexelComponent.B];\nconst kRGBA = [TexelComponent.R, TexelComponent.G, TexelComponent.B, TexelComponent.A];\nconst kBGRA = [TexelComponent.B, TexelComponent.G, TexelComponent.R, TexelComponent.A];\n\nconst unorm = (bitLength: number) => (n: number) => ({\n  value: floatAsNormalizedInteger(n, bitLength, false),\n  type: TexelWriteType.Uint,\n});\n\nconst snorm = (bitLength: number) => (n: number) => ({\n  value: floatAsNormalizedInteger(n, bitLength, true),\n  type: TexelWriteType.Sint,\n});\n\nconst uint = (bitLength: number) => (n: number) => ({\n  value: (assertInIntegerRange(n, bitLength, false), n),\n  type: TexelWriteType.Uint,\n});\n\nconst sint = (bitLength: number) => (n: number) => ({\n  value: (assertInIntegerRange(n, bitLength, true), n),\n  type: TexelWriteType.Sint,\n});\n\nconst unorm2 = { write: unorm(2), bitLength: 2 };\nconst unorm8 = { write: unorm(8), bitLength: 8 };\nconst unorm10 = { write: unorm(10), bitLength: 10 };\n\nconst snorm8 = { write: snorm(8), bitLength: 8 };\n\nconst uint8 = { write: uint(8), bitLength: 8 };\nconst uint16 = { write: uint(16), bitLength: 16 };\nconst uint32 = { write: uint(32), bitLength: 32 };\n\nconst sint8 = { write: sint(8), bitLength: 8 };\nconst sint16 = { write: sint(16), bitLength: 16 };\nconst sint32 = { write: sint(32), bitLength: 32 };\n\nconst float10 = {\n  write: (n: number) => ({\n    value: float32ToFloatBits(n, 0, 5, 5, 15),\n    type: TexelWriteType.Uint,\n  }),\n  bitLength: 10,\n};\n\nconst float11 = {\n  write: (n: number) => ({\n    value: float32ToFloatBits(n, 0, 5, 6, 15),\n    type: TexelWriteType.Uint,\n  }),\n  bitLength: 11,\n};\n\nconst float16 = {\n  write: (n: number) => ({\n    value: float32ToFloatBits(n, 1, 5, 10, 15),\n    type: TexelWriteType.Uint,\n  }),\n  bitLength: 16,\n};\n\nconst float32 = {\n  write: (n: number) => ({\n    value: Math.fround(n),\n    type: TexelWriteType.Float,\n  }),\n  bitLength: 32,\n};\n\nconst repeatComponents = (\n  componentOrder: TexelComponent[],\n  perComponentInfo: SingleComponentInfo\n) => {\n  const componentInfo = componentOrder.reduce((acc, curr) => {\n    return Object.assign(acc, {\n      [curr]: perComponentInfo,\n    });\n  }, {});\n\n  return {\n    componentOrder,\n    componentInfo,\n  };\n};\n\nconst kRepresentationInfo: {\n  // TODO: Figure out if/how to extend this to more texture formats\n  [k in UncompressedTextureFormat]: {\n    componentOrder: TexelComponent[];\n    componentInfo: TexelComponentInfo;\n    sRGB: boolean;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'r8unorm':                { ...repeatComponents(   kR,  unorm8), sRGB: false },\n  'r8snorm':                { ...repeatComponents(   kR,  snorm8), sRGB: false },\n  'r8uint':                 { ...repeatComponents(   kR,   uint8), sRGB: false },\n  'r8sint':                 { ...repeatComponents(   kR,   sint8), sRGB: false },\n  'r16uint':                { ...repeatComponents(   kR,  uint16), sRGB: false },\n  'r16sint':                { ...repeatComponents(   kR,  sint16), sRGB: false },\n  'r16float':               { ...repeatComponents(   kR, float16), sRGB: false },\n  'rg8unorm':               { ...repeatComponents(  kRG,  unorm8), sRGB: false },\n  'rg8snorm':               { ...repeatComponents(  kRG,  snorm8), sRGB: false },\n  'rg8uint':                { ...repeatComponents(  kRG,   uint8), sRGB: false },\n  'rg8sint':                { ...repeatComponents(  kRG,   sint8), sRGB: false },\n  'r32uint':                { ...repeatComponents(   kR,  uint32), sRGB: false },\n  'r32sint':                { ...repeatComponents(   kR,  sint32), sRGB: false },\n  'r32float':               { ...repeatComponents(   kR, float32), sRGB: false },\n  'rg16uint':               { ...repeatComponents(  kRG,  uint16), sRGB: false },\n  'rg16sint':               { ...repeatComponents(  kRG,  sint16), sRGB: false },\n  'rg16float':              { ...repeatComponents(  kRG, float16), sRGB: false },\n\n  'rgba8unorm':             { ...repeatComponents(kRGBA,  unorm8), sRGB: false },\n  'rgba8unorm-srgb':        { ...repeatComponents(kRGBA,  unorm8), sRGB:  true },\n  'rgba8snorm':             { ...repeatComponents(kRGBA,  snorm8), sRGB: false },\n  'rgba8uint':              { ...repeatComponents(kRGBA,   uint8), sRGB: false },\n  'rgba8sint':              { ...repeatComponents(kRGBA,   sint8), sRGB: false },\n  'bgra8unorm':             { ...repeatComponents(kBGRA,  unorm8), sRGB: false },\n  'bgra8unorm-srgb':        { ...repeatComponents(kBGRA,  unorm8), sRGB:  true },\n  'rg32uint':               { ...repeatComponents(  kRG,  uint32), sRGB: false },\n  'rg32sint':               { ...repeatComponents(  kRG,  sint32), sRGB: false },\n  'rg32float':              { ...repeatComponents(  kRG, float32), sRGB: false },\n  'rgba16uint':             { ...repeatComponents(kRGBA,  uint16), sRGB: false },\n  'rgba16sint':             { ...repeatComponents(kRGBA,  sint16), sRGB: false },\n  'rgba16float':            { ...repeatComponents(kRGBA, float16), sRGB: false },\n  'rgba32uint':             { ...repeatComponents(kRGBA,  uint32), sRGB: false },\n  'rgba32sint':             { ...repeatComponents(kRGBA,  sint32), sRGB: false },\n  'rgba32float':            { ...repeatComponents(kRGBA, float32), sRGB: false },\n\n  'rgb10a2unorm':           { componentOrder: kRGBA, componentInfo: { R: unorm10, G: unorm10, B: unorm10, A: unorm2 }, sRGB: false },\n  'rg11b10float':           { componentOrder: kRGB, componentInfo: { R: float11, G: float11, B: float10 }, sRGB: false },\n\n  'depth32float':           { componentOrder: [TexelComponent.Depth], componentInfo: { Depth: float32 }, sRGB: false },\n  'depth24plus':            { componentOrder: [TexelComponent.Depth], componentInfo: { Depth: null }, sRGB: false },\n  'depth24plus-stencil8':   { componentOrder: [TexelComponent.Depth, TexelComponent.Stencil], componentInfo: { Depth: null, Stencil: null }, sRGB: false },\n};\n\nexport interface TexelDataRepresentation {\n  readonly componentOrder: TexelComponent[];\n  readonly componentInfo: TexelComponentInfo;\n  getBytes(components: { [c in TexelComponent]?: number }): ArrayBuffer;\n}\n\nclass TexelDataRepresentationImpl implements TexelDataRepresentation {\n  // TODO: Determine endianness of the GPU data?\n  private isGPULittleEndian = true;\n\n  constructor(\n    private readonly format: UncompressedTextureFormat,\n    readonly componentOrder: TexelComponent[],\n    readonly componentInfo: TexelComponentInfo,\n    private readonly sRGB: boolean\n  ) {}\n\n  private totalBitLength(): number {\n    return this.componentOrder.reduce((acc, curr) => {\n      return acc + this.componentInfo[curr]!.bitLength;\n    }, 0);\n  }\n\n  private setComponent(data: ArrayBuffer, component: TexelComponent, n: number): void {\n    const componentIndex = this.componentOrder.indexOf(component);\n    assert(componentIndex !== -1);\n    const bitOffset = this.componentOrder.slice(0, componentIndex).reduce((acc, curr) => {\n      const componentInfo = this.componentInfo[curr];\n      assert(!!componentInfo);\n      return acc + componentInfo.bitLength;\n    }, 0);\n\n    const componentInfo = this.componentInfo[component];\n    assert(!!componentInfo);\n    const { write, bitLength } = componentInfo;\n\n    const { value, type } = write(n);\n    switch (type) {\n      case TexelWriteType.Float: {\n        const byteOffset = Math.floor(bitOffset / 8);\n        const byteLength = Math.ceil(bitLength / 8);\n        assert(byteOffset === bitOffset / 8 && byteLength === bitLength / 8);\n        switch (byteLength) {\n          case 4:\n            new DataView(data, byteOffset, byteLength).setFloat32(0, value, this.isGPULittleEndian);\n            break;\n          default:\n            unreachable();\n        }\n        break;\n      }\n      case TexelWriteType.Sint: {\n        const byteOffset = Math.floor(bitOffset / 8);\n        const byteLength = Math.ceil(bitLength / 8);\n        assert(byteOffset === bitOffset / 8 && byteLength === bitLength / 8);\n        switch (byteLength) {\n          case 1:\n            new DataView(data, byteOffset, byteLength).setInt8(0, value);\n            break;\n          case 2:\n            new DataView(data, byteOffset, byteLength).setInt16(0, value, this.isGPULittleEndian);\n            break;\n          case 4:\n            new DataView(data, byteOffset, byteLength).setInt32(0, value, this.isGPULittleEndian);\n            break;\n          default:\n            unreachable();\n        }\n        break;\n      }\n      case TexelWriteType.Uint: {\n        const byteOffset = Math.floor(bitOffset / 8);\n        const byteLength = Math.ceil(bitLength / 8);\n        if (byteOffset === bitOffset / 8 && byteLength === bitLength / 8) {\n          switch (byteLength) {\n            case 1:\n              new DataView(data, byteOffset, byteLength).setUint8(0, value);\n              break;\n            case 2:\n              new DataView(data, byteOffset, byteLength).setUint16(\n                0,\n                value,\n                this.isGPULittleEndian\n              );\n              break;\n            case 4:\n              new DataView(data, byteOffset, byteLength).setUint32(\n                0,\n                value,\n                this.isGPULittleEndian\n              );\n              break;\n            default:\n              unreachable();\n          }\n        } else {\n          // Packed representations are all 32-bit and use Uint as the data type.\n          // ex.) rg10b11float, rgb10a2unorm\n          switch (this.totalBitLength()) {\n            case 32: {\n              const view = new DataView(data);\n              const currentValue = view.getUint32(0, this.isGPULittleEndian);\n\n              let mask = 0xffffffff;\n              const bitsToClearRight = bitOffset;\n              const bitsToClearLeft = 32 - (bitLength + bitOffset);\n\n              mask = (mask >>> bitsToClearRight) << bitsToClearRight;\n              mask = (mask << bitsToClearLeft) >>> bitsToClearLeft;\n\n              const newValue = (currentValue & ~mask) | (value << bitOffset);\n\n              view.setUint32(0, newValue, this.isGPULittleEndian);\n              break;\n            }\n            default:\n              unreachable();\n          }\n        }\n        break;\n      }\n      default:\n        unreachable();\n    }\n  }\n\n  getBytes(components: PerTexelComponent<number>): ArrayBuffer {\n    if (this.sRGB) {\n      components = Object.assign({}, components);\n      assert(components.R !== undefined);\n      assert(components.G !== undefined);\n      assert(components.B !== undefined);\n      [components.R, components.G, components.B] = [\n        gammaCompress(components.R),\n        gammaCompress(components.G),\n        gammaCompress(components.B),\n      ];\n    }\n\n    const bytesPerBlock = kUncompressedTextureFormatInfo[this.format].bytesPerBlock;\n    assert(!!bytesPerBlock);\n\n    const data = new ArrayBuffer(bytesPerBlock);\n    for (const c of this.componentOrder) {\n      const componentValue = components[c];\n      assert(componentValue !== undefined);\n      this.setComponent(data, c, componentValue);\n    }\n    return data;\n  }\n}\n\nconst kRepresentationCache: Map<UncompressedTextureFormat, TexelDataRepresentationImpl> = new Map();\nexport function getTexelDataRepresentation(\n  format: UncompressedTextureFormat\n): TexelDataRepresentation {\n  if (!kRepresentationCache.has(format)) {\n    const { componentOrder, componentInfo, sRGB } = kRepresentationInfo[format];\n    kRepresentationCache.set(\n      format,\n      new TexelDataRepresentationImpl(format, componentOrder, componentInfo, sRGB)\n    );\n  }\n  return kRepresentationCache.get(format)!;\n}\n"],"file":"texelData.js"}