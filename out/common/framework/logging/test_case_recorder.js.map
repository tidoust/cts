{"version":3,"sources":["../../../../src/common/framework/logging/test_case_recorder.ts"],"names":["SkipTestCase","now","assert","LogMessageWithStack","LogSeverity","kMaxLogStacks","TestCaseRecorder","constructor","result","debugging","Pass","Map","start","startTime","finish","timeMilliseconds","timems","Math","ceil","status","maxLogSeverity","Skip","Warn","logs","injectResult","injectedResult","Object","assign","debug","ex","logMessage","setStackHidden","logImpl","skipped","warn","expectationFailed","ExpectFailed","validationFailed","ValidationFailed","threw","ThrewException","level","stack","seen","messagesForPreviouslySeenStacks","get","incrementTimesSeen","set","logLinesAtCurrentSeverity","log","push"],"mappings":"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","sourcesContent":["import { SkipTestCase } from '../fixture.js';\nimport { now, assert } from '../util/util.js';\n\nimport { LogMessageWithStack } from './log_message.js';\nimport { LiveTestCaseResult } from './result.js';\n\nenum LogSeverity {\n  Pass = 0,\n  Skip = 1,\n  Warn = 2,\n  ExpectFailed = 3,\n  ValidationFailed = 4,\n  ThrewException = 5,\n}\n\nconst kMaxLogStacks = 2;\n\n/** Holds onto a LiveTestCaseResult owned by the Logger, and writes the results into it. */\nexport class TestCaseRecorder {\n  private result: LiveTestCaseResult;\n  private maxLogSeverity = LogSeverity.Pass;\n  private startTime = -1;\n  private logs: LogMessageWithStack[] = [];\n  private logLinesAtCurrentSeverity = 0;\n  private debugging = false;\n  /** Used to dedup log messages which have identical stacks. */\n  private messagesForPreviouslySeenStacks = new Map<string, LogMessageWithStack>();\n\n  constructor(result: LiveTestCaseResult, debugging: boolean) {\n    this.result = result;\n    this.debugging = debugging;\n  }\n\n  start(): void {\n    assert(this.startTime < 0, 'TestCaseRecorder cannot be reused');\n    this.startTime = now();\n  }\n\n  finish(): void {\n    assert(this.startTime >= 0, 'finish() before start()');\n\n    const timeMilliseconds = now() - this.startTime;\n    // Round to next microsecond to avoid storing useless .xxxx00000000000002 in results.\n    this.result.timems = Math.ceil(timeMilliseconds * 1000) / 1000;\n\n    // Convert numeric enum back to string (but expose 'exception' as 'fail')\n    this.result.status =\n      this.maxLogSeverity === LogSeverity.Pass\n        ? 'pass'\n        : this.maxLogSeverity === LogSeverity.Skip\n        ? 'skip'\n        : this.maxLogSeverity === LogSeverity.Warn\n        ? 'warn'\n        : 'fail'; // Everything else is an error\n\n    this.result.logs = this.logs;\n  }\n\n  injectResult(injectedResult: LiveTestCaseResult): void {\n    Object.assign(this.result, injectedResult);\n  }\n\n  debug(ex: Error): void {\n    if (!this.debugging) {\n      return;\n    }\n    const logMessage = new LogMessageWithStack('DEBUG', ex);\n    logMessage.setStackHidden();\n    this.logImpl(LogSeverity.Pass, logMessage);\n  }\n\n  skipped(ex: SkipTestCase): void {\n    this.logImpl(LogSeverity.Skip, new LogMessageWithStack('SKIP', ex));\n  }\n\n  warn(ex: Error): void {\n    this.logImpl(LogSeverity.Warn, new LogMessageWithStack('WARN', ex));\n  }\n\n  expectationFailed(ex: Error): void {\n    this.logImpl(LogSeverity.ExpectFailed, new LogMessageWithStack('EXPECTATION FAILED', ex));\n  }\n\n  validationFailed(ex: Error): void {\n    this.logImpl(LogSeverity.ValidationFailed, new LogMessageWithStack('VALIDATION FAILED', ex));\n  }\n\n  threw(ex: Error): void {\n    if (ex instanceof SkipTestCase) {\n      this.skipped(ex);\n      return;\n    }\n    this.logImpl(LogSeverity.ThrewException, new LogMessageWithStack('EXCEPTION', ex));\n  }\n\n  private logImpl(level: LogSeverity, logMessage: LogMessageWithStack): void {\n    // Deduplicate errors with the exact same stack\n    if (logMessage.stack) {\n      const seen = this.messagesForPreviouslySeenStacks.get(logMessage.stack);\n      if (seen) {\n        seen.incrementTimesSeen();\n        return;\n      }\n      this.messagesForPreviouslySeenStacks.set(logMessage.stack, logMessage);\n    }\n\n    // Mark printStack=false for all logs except 2 at the highest severity\n    if (level > this.maxLogSeverity) {\n      this.logLinesAtCurrentSeverity = 0;\n      this.maxLogSeverity = level;\n      if (!this.debugging) {\n        // Go back and turn off printStack for everything of a lower log level\n        for (const log of this.logs) {\n          log.setStackHidden();\n        }\n      }\n    }\n    if (level < this.maxLogSeverity || this.logLinesAtCurrentSeverity >= kMaxLogStacks) {\n      if (!this.debugging) {\n        logMessage.setStackHidden();\n      }\n    }\n    this.logs.push(logMessage);\n    this.logLinesAtCurrentSeverity++;\n  }\n}\n"],"file":"test_case_recorder.js"}