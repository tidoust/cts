{"version":3,"sources":["../../../src/common/framework/tree.ts"],"names":["compareQueries","Ordering","TestQueryMultiCase","TestQuerySingleCase","TestQueryMultiFile","TestQueryMultiTest","kBigSeparator","kWildcard","kPathSeparator","kParamSeparator","stringifySingleParam","assert","TestTree","constructor","root","iterateCollapsedQueries","iterateSubtreeCollapsedQueries","iterateLeaves","iterateSubtreeLeaves","dissolveLevelBoundaries","newRoot","toString","subtreeToString","subtree","child","children","collapsible","query","name","tree","indent","s","JSON","stringify","description","undefined","loadTreeForQuery","loader","queryToLoad","subqueriesToExpand","suite","specs","listing","subqueriesToExpandEntries","Array","from","entries","seenSubqueriesToExpand","length","fill","isCollapsible","subquery","every","i","toExpand","ordering","Equal","StrictSubset","foundCase","subtreeL0","makeTreeForSuite","entry","file","readme","trim","queryL1","orderingL1","Unordered","readmeSubtree","addSubtreeForDirPath","spec","importSpecFile","subtreeL1","addSubtreeForFilePath","t","g","iterate","queryL3","id","test","params","orderingL3","StrictSuperset","subtreeL2","addSubtreeForTestPath","addLeafForCase","sq","seen","readableRelativeName","Map","subqueryFile","part","push","getOrInsertSubtree","checkCollapsible","filePathParts","subqueryTest","subqueryParams","k","v","Object","testPathParts","insertLeaf","key","parent","createSubtree","get","set","leaf","readableNameForCase","run","rec","has","size","level","newtree","newChild","paramsKeys","keys","lastKey"],"mappings":"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","sourcesContent":["import { TestFileLoader } from './file_loader.js';\nimport { TestCaseRecorder } from './logging/test_case_recorder.js';\nimport { CaseParamsRW } from './params_utils.js';\nimport { compareQueries, Ordering } from './query/compare.js';\nimport {\n  TestQuery,\n  TestQueryMultiCase,\n  TestQuerySingleCase,\n  TestQueryMultiFile,\n  TestQueryMultiTest,\n} from './query/query.js';\nimport { kBigSeparator, kWildcard, kPathSeparator, kParamSeparator } from './query/separators.js';\nimport { stringifySingleParam } from './query/stringify_params.js';\nimport { RunCase, RunFn } from './test_group.js';\nimport { assert } from './util/util.js';\n\n// `loadTreeForQuery()` loads a TestTree for a given queryToLoad.\n// The resulting tree is a linked-list all the way from `suite:*` to queryToLoad,\n// and under queryToLoad is a tree containing every case matched by queryToLoad.\n//\n// `subqueriesToExpand` influences the `collapsible` flag on nodes in the resulting tree.\n// A node is considered \"collapsible\" if none of the subqueriesToExpand is a StrictSubset\n// of that node.\n//\n// In WebKit/Blink-style web_tests, an expectation file marks individual cts.html \"variants\" as\n// \"Failure\", \"Crash\", etc.\n// By passing in the list of expectations as the subqueriesToExpand, we can programmatically\n// subdivide the cts.html \"variants\" list to be able to implement arbitrarily-fine suppressions\n// (instead of having to suppress entire test files, which would lose a lot of coverage).\n//\n// `iterateCollapsedQueries()` produces the list of queries for the variants list.\n//\n// Though somewhat complicated, this system has important benefits:\n//   - Avoids having to suppress entire test files, which would cause large test coverage loss.\n//   - Minimizes the number of page loads needed for fine-grained suppressions.\n//     (In the naive case, we could do one page load per test case - but the test suite would\n//     take impossibly long to run.)\n//   - Enables developers to put any number of tests in one file as appropriate, without worrying\n//     about expectation granularity.\n\nexport interface TestSubtree<T extends TestQuery = TestQuery> {\n  /**\n   * Readable \"relative\" name for display in standalone runner.\n   * Not always the exact relative name, because sometimes there isn't\n   * one (e.g. s:f:* relative to s:f,*), but something that is readable.\n   */\n  readonly readableRelativeName: string;\n  readonly query: T;\n  readonly children: Map<string, TestTreeNode>;\n  readonly collapsible: boolean;\n  description?: string;\n}\n\nexport interface TestTreeLeaf {\n  /**\n   * Readable \"relative\" name for display in standalone runner.\n   */\n  readonly readableRelativeName: string;\n  readonly query: TestQuerySingleCase;\n  readonly run: RunFn;\n}\n\nexport type TestTreeNode = TestSubtree | TestTreeLeaf;\n\nexport class TestTree {\n  readonly root: TestSubtree;\n\n  constructor(root: TestSubtree) {\n    this.root = root;\n  }\n\n  iterateCollapsedQueries(): IterableIterator<TestQuery> {\n    return TestTree.iterateSubtreeCollapsedQueries(this.root);\n  }\n\n  iterateLeaves(): IterableIterator<TestTreeLeaf> {\n    return TestTree.iterateSubtreeLeaves(this.root);\n  }\n\n  /**\n   * If a parent and its child are at different levels, then\n   * generally the parent has only one child, i.e.:\n   *   a,* { a,b,* { a,b:* { ... } } }\n   * Collapse that down into:\n   *   a,* { a,b:* { ... } }\n   * which is less needlessly verbose when displaying the tree in the standalone runner.\n   */\n  dissolveLevelBoundaries(): void {\n    const newRoot = dissolveLevelBoundaries(this.root);\n    assert(newRoot === this.root);\n  }\n\n  toString(): string {\n    return TestTree.subtreeToString('(root)', this.root, '');\n  }\n\n  static *iterateSubtreeCollapsedQueries(subtree: TestSubtree): IterableIterator<TestQuery> {\n    for (const [, child] of subtree.children) {\n      if ('children' in child && !child.collapsible) {\n        yield* TestTree.iterateSubtreeCollapsedQueries(child);\n      } else {\n        yield child.query;\n      }\n    }\n  }\n\n  static *iterateSubtreeLeaves(subtree: TestSubtree): IterableIterator<TestTreeLeaf> {\n    for (const [, child] of subtree.children) {\n      if ('children' in child) {\n        yield* TestTree.iterateSubtreeLeaves(child);\n      } else {\n        yield child;\n      }\n    }\n  }\n\n  static subtreeToString(name: string, tree: TestTreeNode, indent: string): string {\n    const collapsible = 'run' in tree ? '>' : tree.collapsible ? '+' : '-';\n    let s = indent + `${collapsible} ${JSON.stringify(name)} => ${tree.query}`;\n    if ('children' in tree) {\n      if (tree.description !== undefined) {\n        s += `\\n${indent}  | ${JSON.stringify(tree.description)}`;\n      }\n\n      for (const [name, child] of tree.children) {\n        s += '\\n' + TestTree.subtreeToString(name, child, indent + '  ');\n      }\n    }\n    return s;\n  }\n}\n\n// TODO: Consider having subqueriesToExpand actually impact the depth-order of params in the tree.\nexport async function loadTreeForQuery(\n  loader: TestFileLoader,\n  queryToLoad: TestQuery,\n  subqueriesToExpand: TestQuery[]\n): Promise<TestTree> {\n  const suite = queryToLoad.suite;\n  const specs = await loader.listing(suite);\n\n  const subqueriesToExpandEntries = Array.from(subqueriesToExpand.entries());\n  const seenSubqueriesToExpand: boolean[] = new Array(subqueriesToExpand.length);\n  seenSubqueriesToExpand.fill(false);\n\n  const isCollapsible = (subquery: TestQuery) =>\n    subqueriesToExpandEntries.every(([i, toExpand]) => {\n      const ordering = compareQueries(toExpand, subquery);\n\n      // If toExpand == subquery, no expansion is needed (but it's still \"seen\").\n      if (ordering === Ordering.Equal) seenSubqueriesToExpand[i] = true;\n      return ordering !== Ordering.StrictSubset;\n    });\n\n  // L0 = suite-level, e.g. suite:*\n  // L1 =  file-level, e.g. suite:a,b:*\n  // L2 =  test-level, e.g. suite:a,b:c,d:*\n  // L3 =  case-level, e.g. suite:a,b:c,d:\n  let foundCase = false;\n  // L0 is suite:*\n  const subtreeL0 = makeTreeForSuite(suite);\n  isCollapsible(subtreeL0.query); // mark seenSubqueriesToExpand\n  for (const entry of specs) {\n    if (entry.file.length === 0 && 'readme' in entry) {\n      // Suite-level readme.\n      assert(subtreeL0.description === undefined);\n      subtreeL0.description = entry.readme.trim();\n      continue;\n    }\n\n    {\n      const queryL1 = new TestQueryMultiFile(suite, entry.file);\n      const orderingL1 = compareQueries(queryL1, queryToLoad);\n      if (orderingL1 === Ordering.Unordered) {\n        // File path is not matched by this query.\n        continue;\n      }\n    }\n\n    if ('readme' in entry) {\n      // Entry is a README that is an ancestor or descendant of the query.\n      // (It's included for display in the standalone runner.)\n\n      // readmeSubtree is suite:a,b,*\n      // (This is always going to dedup with a file path, if there are any test spec files under\n      // the directory that has the README).\n      const readmeSubtree: TestSubtree<TestQueryMultiFile> = addSubtreeForDirPath(\n        subtreeL0,\n        entry.file\n      );\n      assert(readmeSubtree.description === undefined);\n      readmeSubtree.description = entry.readme.trim();\n      continue;\n    }\n    // Entry is a spec file.\n\n    const spec = await loader.importSpecFile(queryToLoad.suite, entry.file);\n    const description = spec.description.trim();\n    // subtreeL1 is suite:a,b:*\n    const subtreeL1: TestSubtree<TestQueryMultiTest> = addSubtreeForFilePath(\n      subtreeL0,\n      entry.file,\n      description,\n      isCollapsible\n    );\n\n    // TODO: If tree generation gets too slow, avoid actually iterating the cases in a file\n    // if there's no need to (based on the subqueriesToExpand).\n    for (const t of spec.g.iterate()) {\n      {\n        const queryL3 = new TestQuerySingleCase(suite, entry.file, t.id.test, t.id.params);\n        const orderingL3 = compareQueries(queryL3, queryToLoad);\n        if (orderingL3 === Ordering.Unordered || orderingL3 === Ordering.StrictSuperset) {\n          // Case is not matched by this query.\n          continue;\n        }\n      }\n\n      // subtreeL2 is suite:a,b:c,d:*\n      const subtreeL2: TestSubtree<TestQueryMultiCase> = addSubtreeForTestPath(\n        subtreeL1,\n        t.id.test,\n        isCollapsible\n      );\n\n      // Leaf for case is suite:a,b:c,d:x=1;y=2\n      addLeafForCase(subtreeL2, t, isCollapsible);\n\n      foundCase = true;\n    }\n  }\n\n  for (const [i, sq] of subqueriesToExpandEntries) {\n    const seen = seenSubqueriesToExpand[i];\n    assert(\n      seen,\n      `subqueriesToExpand entry did not match anything \\\n(can happen due to overlap with another subquery): ${sq.toString()}`\n    );\n  }\n  assert(foundCase, 'Query does not match any cases');\n\n  return new TestTree(subtreeL0);\n}\n\nfunction makeTreeForSuite(suite: string): TestSubtree<TestQueryMultiFile> {\n  return {\n    readableRelativeName: suite + kBigSeparator,\n    query: new TestQueryMultiFile(suite, []),\n    children: new Map(),\n    collapsible: false,\n  };\n}\n\nfunction addSubtreeForDirPath(\n  tree: TestSubtree<TestQueryMultiFile>,\n  file: string[]\n): TestSubtree<TestQueryMultiFile> {\n  const subqueryFile: string[] = [];\n  // To start, tree is suite:*\n  // This loop goes from that -> suite:a,* -> suite:a,b,*\n  for (const part of file) {\n    subqueryFile.push(part);\n    tree = getOrInsertSubtree(part, tree, () => {\n      const query = new TestQueryMultiFile(tree.query.suite, subqueryFile);\n      return { readableRelativeName: part + kPathSeparator + kWildcard, query, collapsible: false };\n    });\n  }\n  return tree;\n}\n\nfunction addSubtreeForFilePath(\n  tree: TestSubtree<TestQueryMultiFile>,\n  file: string[],\n  description: string,\n  checkCollapsible: (sq: TestQuery) => boolean\n): TestSubtree<TestQueryMultiTest> {\n  // To start, tree is suite:*\n  // This goes from that -> suite:a,* -> suite:a,b,*\n  tree = addSubtreeForDirPath(tree, file);\n  // This goes from that -> suite:a,b:*\n  const subtree = getOrInsertSubtree('', tree, () => {\n    const query = new TestQueryMultiTest(tree.query.suite, tree.query.filePathParts, []);\n    assert(file.length > 0, 'file path is empty');\n    return {\n      readableRelativeName: file[file.length - 1] + kBigSeparator + kWildcard,\n      query,\n      description,\n      collapsible: checkCollapsible(query),\n    };\n  });\n  return subtree;\n}\n\nfunction addSubtreeForTestPath(\n  tree: TestSubtree<TestQueryMultiTest>,\n  test: readonly string[],\n  isCollapsible: (sq: TestQuery) => boolean\n): TestSubtree<TestQueryMultiCase> {\n  const subqueryTest: string[] = [];\n  // To start, tree is suite:a,b:*\n  // This loop goes from that -> suite:a,b:c,* -> suite:a,b:c,d,*\n  for (const part of test) {\n    subqueryTest.push(part);\n    tree = getOrInsertSubtree(part, tree, () => {\n      const query = new TestQueryMultiTest(\n        tree.query.suite,\n        tree.query.filePathParts,\n        subqueryTest\n      );\n      return {\n        readableRelativeName: part + kPathSeparator + kWildcard,\n        query,\n        collapsible: isCollapsible(query),\n      };\n    });\n  }\n  // This goes from that -> suite:a,b:c,d:*\n  return getOrInsertSubtree('', tree, () => {\n    const query = new TestQueryMultiCase(\n      tree.query.suite,\n      tree.query.filePathParts,\n      subqueryTest,\n      {}\n    );\n    assert(subqueryTest.length > 0, 'subqueryTest is empty');\n    return {\n      readableRelativeName: subqueryTest[subqueryTest.length - 1] + kBigSeparator + kWildcard,\n      kWildcard,\n      query,\n      collapsible: isCollapsible(query),\n    };\n  });\n}\n\nfunction addLeafForCase(\n  tree: TestSubtree<TestQueryMultiTest>,\n  t: RunCase,\n  checkCollapsible: (sq: TestQuery) => boolean\n): void {\n  const query = tree.query;\n  let name: string = '';\n  const subqueryParams: CaseParamsRW = {};\n\n  // To start, tree is suite:a,b:c,d:*\n  // This loop goes from that -> suite:a,b:c,d:x=1;* -> suite:a,b:c,d:x=1;y=2;*\n  for (const [k, v] of Object.entries(t.id.params)) {\n    name = stringifySingleParam(k, v);\n    subqueryParams[k] = v;\n\n    tree = getOrInsertSubtree(name, tree, () => {\n      const subquery = new TestQueryMultiCase(\n        query.suite,\n        query.filePathParts,\n        query.testPathParts,\n        subqueryParams\n      );\n      return {\n        readableRelativeName: name + kParamSeparator + kWildcard,\n        query: subquery,\n        collapsible: checkCollapsible(subquery),\n      };\n    });\n  }\n\n  // This goes from that -> suite:a,b:c,d:x=1;y=2\n  const subquery = new TestQuerySingleCase(\n    query.suite,\n    query.filePathParts,\n    query.testPathParts,\n    subqueryParams\n  );\n  checkCollapsible(subquery); // mark seenSubqueriesToExpand\n  insertLeaf(tree, subquery, t);\n}\n\nfunction getOrInsertSubtree<T extends TestQuery>(\n  key: string,\n  parent: TestSubtree,\n  createSubtree: () => Omit<TestSubtree<T>, 'children'>\n): TestSubtree<T> {\n  let v: TestSubtree<T>;\n  const child = parent.children.get(key);\n  if (child !== undefined) {\n    assert('children' in child); // Make sure cached subtree is not actually a leaf\n    v = child as TestSubtree<T>;\n  } else {\n    v = { ...createSubtree(), children: new Map() };\n    parent.children.set(key, v);\n  }\n  return v;\n}\n\nfunction insertLeaf(parent: TestSubtree, query: TestQuerySingleCase, t: RunCase) {\n  const key = '';\n  const leaf: TestTreeLeaf = {\n    readableRelativeName: readableNameForCase(query),\n    query,\n    run: (rec: TestCaseRecorder) => t.run(rec),\n  };\n  assert(!parent.children.has(key));\n  parent.children.set(key, leaf);\n}\n\nfunction dissolveLevelBoundaries(tree: TestTreeNode): TestTreeNode {\n  if ('children' in tree) {\n    if (tree.children.size === 1 && tree.description === undefined) {\n      // Loops exactly once\n      for (const [, child] of tree.children) {\n        if (child.query.level > tree.query.level) {\n          const newtree = dissolveLevelBoundaries(child);\n\n          return newtree;\n        }\n      }\n    }\n\n    for (const [k, child] of tree.children) {\n      const newChild = dissolveLevelBoundaries(child);\n      if (newChild !== child) {\n        tree.children.set(k, newChild);\n      }\n    }\n  }\n  return tree;\n}\n\n/** Generate a readable relative name for a case (used in standalone). */\nfunction readableNameForCase(query: TestQuerySingleCase): string {\n  const paramsKeys = Object.keys(query.params);\n  if (paramsKeys.length === 0) {\n    return query.testPathParts[query.testPathParts.length - 1] + kBigSeparator;\n  } else {\n    const lastKey = paramsKeys[paramsKeys.length - 1];\n    return stringifySingleParam(lastKey, query.params[lastKey]);\n  }\n}\n"],"file":"tree.js"}