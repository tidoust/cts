{"version":3,"sources":["../../../src/common/framework/params_utils.ts"],"names":["comparePublicParamsPaths","Ordering","kWildcard","kParamSeparator","kParamKVSeparator","paramKeyIsPublic","key","startsWith","extractPublicParams","params","publicParams","k","Object","keys","badParamValueChars","RegExp","publicParamsEquals","x","y","Equal"],"mappings":";;GAAA,SAASA,wBAAT,EAAmCC,QAAnC,QAAmD,oBAAnD,CACA,SAASC,SAAT,EAAoBC,eAApB,EAAqCC,iBAArC,QAA8D,uBAA9D;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAiBA,OAAO,SAASC,gBAAT,CAA0BC,GAA1B,EAAgD;AACrD,SAAO,CAACA,GAAG,CAACC,UAAJ,CAAe,GAAf,CAAR;AACD;;AAED,OAAO,SAASC,mBAAT,CAA6BC,MAA7B,EAA6D;AAClE,QAAMC,YAA0B,GAAG,EAAnC;AACA,OAAK,MAAMC,CAAX,IAAgBC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAhB,EAAqC;AACnC,QAAIJ,gBAAgB,CAACM,CAAD,CAApB,EAAyB;AACvBD,MAAAA,YAAY,CAACC,CAAD,CAAZ,GAAkBF,MAAM,CAACE,CAAD,CAAxB;AACD;AACF;AACD,SAAOD,YAAP;AACD;;AAED,OAAO,MAAMI,kBAAkB,GAAG,IAAIC,MAAJ;AAChC,MAAMX,iBAAN,GAA0BD,eAA1B,GAA4CD,SAA5C,GAAwD,GADxB,CAA3B;;;AAIP,OAAO,SAASc,kBAAT,CAA4BC,CAA5B,EAA2CC,CAA3C,EAAmE;AACxE,SAAOlB,wBAAwB,CAACiB,CAAD,EAAIC,CAAJ,CAAxB,KAAmCjB,QAAQ,CAACkB,KAAnD;AACD","sourcesContent":["import { comparePublicParamsPaths, Ordering } from './query/compare.js';\nimport { kWildcard, kParamSeparator, kParamKVSeparator } from './query/separators.js';\n\n// Consider adding more types here if needed\n//\n// TODO: This type isn't actually used to constrain what you're allowed to do in `.params()`, so\n// it's not really serving its purpose. Figure out how to fix that?\nexport type ParamArgument =\n  | undefined\n  | null\n  | number\n  | string\n  | boolean\n  | number[]\n  | { readonly [k: string]: undefined | null | number | string | boolean };\nexport type CaseParams = {\n  readonly [k: string]: ParamArgument;\n};\nexport interface CaseParamsRW {\n  [k: string]: ParamArgument;\n}\nexport type CaseParamsIterable = Iterable<CaseParams>;\n\nexport function paramKeyIsPublic(key: string): boolean {\n  return !key.startsWith('_');\n}\n\nexport function extractPublicParams(params: CaseParams): CaseParams {\n  const publicParams: CaseParamsRW = {};\n  for (const k of Object.keys(params)) {\n    if (paramKeyIsPublic(k)) {\n      publicParams[k] = params[k];\n    }\n  }\n  return publicParams;\n}\n\nexport const badParamValueChars = new RegExp(\n  '[' + kParamKVSeparator + kParamSeparator + kWildcard + ']'\n);\n\nexport function publicParamsEquals(x: CaseParams, y: CaseParams): boolean {\n  return comparePublicParamsPaths(x, y) === Ordering.Equal;\n}\n"],"file":"params_utils.js"}