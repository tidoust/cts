{"version":3,"sources":["../../../src/common/tools/crawl.ts"],"names":["fs","path","assert","unreachable","fg","require","specFileSuffix","crawl","suite","suiteDir","existsSync","console","error","process","exit","glob","filesToEnumerate","onlyFiles","sort","entries","file","f","substring","length","endsWith","filepathWithoutExtension","filename","mod","description","undefined","g","checkCaseNamesAndDuplicates","split","push","trim","basename","readme","readFileSync","makeListing","dirname"],"mappings":"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","sourcesContent":["// Node can look at the filesystem, but JS in the browser can't.\n// This crawls the file tree under src/suites/${suite} to generate a (non-hierarchical) static\n// listing file that can then be used in the browser to load the modules containing the tests.\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport { SpecFile } from '../framework/file_loader.js';\nimport { TestSuiteListingEntry, TestSuiteListing } from '../framework/test_suite_listing.js';\nimport { assert, unreachable } from '../framework/util/util.js';\n\nconst fg = require('fast-glob');\n\nconst specFileSuffix = '.spec.ts';\n\nexport async function crawl(suite: string): Promise<TestSuiteListingEntry[]> {\n  const suiteDir = 'src/' + suite;\n  if (!fs.existsSync(suiteDir)) {\n    console.error(`Could not find ${suiteDir}`);\n    process.exit(1);\n  }\n\n  const glob = `${suiteDir}/**/{README.txt,*${specFileSuffix}}`;\n  const filesToEnumerate: string[] = await fg(glob, { onlyFiles: true });\n  filesToEnumerate.sort();\n\n  const entries: TestSuiteListingEntry[] = [];\n  for (const file of filesToEnumerate) {\n    const f = file.substring((suiteDir + '/').length); // Suite-relative file path\n    if (f.endsWith(specFileSuffix)) {\n      const filepathWithoutExtension = f.substring(0, f.length - specFileSuffix.length);\n      const filename = `../../../${suiteDir}/${filepathWithoutExtension}.spec.js`;\n\n      const mod = (await import(filename)) as SpecFile;\n      assert(mod.description !== undefined, 'Test spec file missing description: ' + filename);\n      assert(mod.g !== undefined, 'Test spec file missing TestGroup definition: ' + filename);\n\n      mod.g.checkCaseNamesAndDuplicates();\n\n      const path = filepathWithoutExtension.split('/');\n      entries.push({ file: path, description: mod.description.trim() });\n    } else if (path.basename(file) === 'README.txt') {\n      const filepathWithoutExtension = f.substring(0, f.length - '/README.txt'.length);\n      const readme = fs.readFileSync(file, 'utf8').trim();\n\n      const path = filepathWithoutExtension ? filepathWithoutExtension.split('/') : [];\n      entries.push({ file: path, readme });\n    } else {\n      unreachable(`glob ${glob} matched an unrecognized filename ${file}`);\n    }\n  }\n\n  return entries;\n}\n\nexport function makeListing(filename: string): Promise<TestSuiteListing> {\n  const suite = path.basename(path.dirname(filename));\n  return crawl(suite);\n}\n"],"file":"crawl.js"}