{"version":3,"sources":["../../../src/common/runtime/wpt.ts"],"names":["DefaultTestFileLoader","Logger","parseQuery","AsyncMutex","assert","optionEnabled","TestWorker","loader","qs","URLSearchParams","window","location","search","getAll","length","testcases","loadCases","addWPTTests","worker","undefined","log","mutex","running","testcase","name","query","toString","wpt_fn","p","with","rec","res","record","run","step","status","logs","map","s","toJSON","join","done","push","async_test","Promise","all","then"],"mappings":";;GAAA,SAASA,qBAAT,QAAsC,6BAAtC,CACA,SAASC,MAAT,QAAuB,gCAAvB,CACA,SAASC,UAAT,QAA2B,kCAA3B;;AAEA,SAASC,UAAT,QAA2B,kCAA3B;AACA,SAASC,MAAT,QAAuB,2BAAvB;;AAEA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,UAAT,QAA2B,yBAA3B;;;;;;;;;;AAUA,CAAC,YAAY;AACX,QAAMC,MAAM,GAAG,IAAIP,qBAAJ,EAAf;AACA,QAAMQ,EAAE,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,EAA4CC,MAA5C,CAAmD,GAAnD,CAAX;AACAT,EAAAA,MAAM,CAACI,EAAE,CAACM,MAAH,KAAc,CAAf,EAAkB,0CAAlB,CAAN;AACA,QAAMC,SAAS,GAAG,MAAMR,MAAM,CAACS,SAAP,CAAiBd,UAAU,CAACM,EAAE,CAAC,CAAD,CAAH,CAA3B,CAAxB;;AAEA,QAAMS,WAAW,CAACF,SAAD,CAAjB;AACD,CAPD;;AASA;AACA,SAASE,WAAT,CAAqBF,SAArB,EAAiF;AAC/E,QAAMG,MAAM,GAAGb,aAAa,CAAC,QAAD,CAAb,GAA0B,IAAIC,UAAJ,CAAe,KAAf,CAA1B,GAAkDa,SAAjE;;AAEA,QAAMC,GAAG,GAAG,IAAInB,MAAJ,CAAW,KAAX,CAAZ;AACA,QAAMoB,KAAK,GAAG,IAAIlB,UAAJ,EAAd;AACA,QAAMmB,OAA6B,GAAG,EAAtC;;AAEA,OAAK,MAAMC,QAAX,IAAuBR,SAAvB,EAAkC;AAChC,UAAMS,IAAI,GAAGD,QAAQ,CAACE,KAAT,CAAeC,QAAf,EAAb;AACA,UAAMC,MAAM,GAAG,YAA8C;AAC3D,YAAMC,CAAC,GAAGP,KAAK,CAACQ,IAAN,CAAW,YAAY;AAC/B,cAAM,CAACC,GAAD,EAAMC,GAAN,IAAaX,GAAG,CAACY,MAAJ,CAAWR,IAAX,CAAnB;AACA,YAAIN,MAAJ,EAAY;AACV,gBAAMA,MAAM,CAACe,GAAP,CAAWH,GAAX,EAAgBN,IAAhB,CAAN;AACD,SAFD,MAEO;AACL,gBAAMD,QAAQ,CAACU,GAAT,CAAaH,GAAb,CAAN;AACD;;AAED,aAAKI,IAAL,CAAU,MAAM;AACd;AACA,cAAIH,GAAG,CAACI,MAAJ,KAAe,MAAnB,EAA2B;AACzB,kBAAM,CAACJ,GAAG,CAACK,IAAJ,IAAY,EAAb,EAAiBC,GAAjB,CAAqBC,CAAC,IAAIA,CAAC,CAACC,MAAF,EAA1B,EAAsCC,IAAtC,CAA2C,MAA3C,CAAN;AACD;AACF,SALD;AAMA,aAAKC,IAAL;AACD,OAfS,CAAV;;AAiBAnB,MAAAA,OAAO,CAACoB,IAAR,CAAad,CAAb;AACA,aAAOA,CAAP;AACD,KApBD;;AAsBAe,IAAAA,UAAU,CAAChB,MAAD,EAASH,IAAT,CAAV;AACD;;AAED,SAAOoB,OAAO,CAACC,GAAR,CAAYvB,OAAZ,EAAqBwB,IAArB,CAA0B,MAAM1B,GAAhC,CAAP;AACD","sourcesContent":["import { DefaultTestFileLoader } from '../framework/file_loader.js';\nimport { Logger } from '../framework/logging/logger.js';\nimport { parseQuery } from '../framework/query/parseQuery.js';\nimport { TestTreeLeaf } from '../framework/tree.js';\nimport { AsyncMutex } from '../framework/util/async_mutex.js';\nimport { assert } from '../framework/util/util.js';\n\nimport { optionEnabled } from './helper/options.js';\nimport { TestWorker } from './helper/test_worker.js';\n\ndeclare interface WptTestObject {\n  step(f: () => void): void;\n  done(): void;\n}\n// Implements the wpt-embedded test runner (see also: wpt/cts.html).\n\ndeclare function async_test(f: (this: WptTestObject) => Promise<void>, name: string): void;\n\n(async () => {\n  const loader = new DefaultTestFileLoader();\n  const qs = new URLSearchParams(window.location.search).getAll('q');\n  assert(qs.length === 1, 'currently, there must be exactly one ?q=');\n  const testcases = await loader.loadCases(parseQuery(qs[0]));\n\n  await addWPTTests(testcases);\n})();\n\n// Note: `async_test`s must ALL be added within the same task. This function *must not* be async.\nfunction addWPTTests(testcases: IterableIterator<TestTreeLeaf>): Promise<Logger> {\n  const worker = optionEnabled('worker') ? new TestWorker(false) : undefined;\n\n  const log = new Logger(false);\n  const mutex = new AsyncMutex();\n  const running: Array<Promise<void>> = [];\n\n  for (const testcase of testcases) {\n    const name = testcase.query.toString();\n    const wpt_fn = function (this: WptTestObject): Promise<void> {\n      const p = mutex.with(async () => {\n        const [rec, res] = log.record(name);\n        if (worker) {\n          await worker.run(rec, name);\n        } else {\n          await testcase.run(rec);\n        }\n\n        this.step(() => {\n          // Unfortunately, it seems not possible to surface any logs for warn/skip.\n          if (res.status === 'fail') {\n            throw (res.logs || []).map(s => s.toJSON()).join('\\n\\n');\n          }\n        });\n        this.done();\n      });\n\n      running.push(p);\n      return p;\n    };\n\n    async_test(wpt_fn, name);\n  }\n\n  return Promise.all(running).then(() => log);\n}\n"],"file":"wpt.js"}