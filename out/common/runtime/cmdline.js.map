{"version":3,"sources":["../../../src/common/runtime/cmdline.ts"],"names":["fs","process","DefaultTestFileLoader","Logger","parseQuery","assert","unreachable","usage","rc","console","log","exit","existsSync","verbose","debug","printJSON","queries","a","argv","slice","startsWith","push","length","loader","testcases","loadCases","failed","warned","skipped","total","testcase","name","query","toString","rec","res","record","run","printResults","status","asJSON","passed","pct","x","toFixed","rpt","xs","padStart","Math","log10","ex","results","r","timems","logs","l","toJSON","replace"],"mappings":"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","sourcesContent":["/* eslint no-console: \"off\" */\n/* eslint no-process-exit: \"off\" */\n\nimport * as fs from 'fs';\nimport * as process from 'process';\n\nimport { DefaultTestFileLoader } from '../framework/file_loader.js';\nimport { Logger } from '../framework/logging/logger.js';\nimport { LiveTestCaseResult } from '../framework/logging/result.js';\nimport { parseQuery } from '../framework/query/parseQuery.js';\nimport { assert, unreachable } from '../framework/util/util.js';\n\nfunction usage(rc: number): never {\n  console.log('Usage:');\n  console.log('  tools/run [OPTIONS...] QUERIES...');\n  console.log('  tools/run unittests: webgpu:buffers/');\n  console.log('Options:');\n  console.log('  --verbose     Print result/log of every test as it runs.');\n  console.log('  --debug       Include debug messages in logging.');\n  console.log('  --print-json  Print the complete result JSON in the output.');\n  return process.exit(rc);\n}\n\nif (!fs.existsSync('src/common/runtime/cmdline.ts')) {\n  console.log('Must be run from repository root');\n  usage(1);\n}\n\nlet verbose = false;\nlet debug = false;\nlet printJSON = false;\nconst queries: string[] = [];\nfor (const a of process.argv.slice(2)) {\n  if (a.startsWith('-')) {\n    if (a === '--verbose') {\n      verbose = true;\n    } else if (a === '--debug') {\n      debug = true;\n    } else if (a === '--print-json') {\n      printJSON = true;\n    } else {\n      usage(1);\n    }\n  } else {\n    queries.push(a);\n  }\n}\n\nif (queries.length === 0) {\n  usage(0);\n}\n\n(async () => {\n  try {\n    const loader = new DefaultTestFileLoader();\n    assert(queries.length === 1, 'currently, there must be exactly one query on the cmd line');\n    const testcases = await loader.loadCases(parseQuery(queries[0]));\n\n    const log = new Logger(debug);\n\n    const failed: Array<[string, LiveTestCaseResult]> = [];\n    const warned: Array<[string, LiveTestCaseResult]> = [];\n    const skipped: Array<[string, LiveTestCaseResult]> = [];\n\n    let total = 0;\n\n    for (const testcase of testcases) {\n      const name = testcase.query.toString();\n      const [rec, res] = log.record(name);\n      await testcase.run(rec);\n\n      if (verbose) {\n        printResults([[name, res]]);\n      }\n\n      total++;\n      switch (res.status) {\n        case 'pass':\n          break;\n        case 'fail':\n          failed.push([name, res]);\n          break;\n        case 'warn':\n          warned.push([name, res]);\n          break;\n        case 'skip':\n          skipped.push([name, res]);\n          break;\n        default:\n          unreachable('unrecognized status');\n      }\n    }\n\n    assert(total > 0, 'found no tests!');\n\n    // TODO: write results out somewhere (a file?)\n    if (printJSON) {\n      console.log(log.asJSON(2));\n    }\n\n    if (skipped.length) {\n      console.log('');\n      console.log('** Skipped **');\n      printResults(skipped);\n    }\n    if (warned.length) {\n      console.log('');\n      console.log('** Warnings **');\n      printResults(warned);\n    }\n    if (failed.length) {\n      console.log('');\n      console.log('** Failures **');\n      printResults(failed);\n    }\n\n    const passed = total - warned.length - failed.length - skipped.length;\n    const pct = (x: number) => ((100 * x) / total).toFixed(2);\n    const rpt = (x: number) => {\n      const xs = x.toString().padStart(1 + Math.log10(total), ' ');\n      return `${xs} / ${total} = ${pct(x).padStart(6, ' ')}%`;\n    };\n    console.log('');\n    console.log(`** Summary **\nPassed  w/o warnings = ${rpt(passed)}\nPassed with warnings = ${rpt(warned.length)}\nSkipped              = ${rpt(skipped.length)}\nFailed               = ${rpt(failed.length)}`);\n\n    if (failed.length || warned.length) {\n      process.exit(1);\n    }\n  } catch (ex) {\n    console.log(ex);\n    process.exit(1);\n  }\n})();\n\nfunction printResults(results: Array<[string, LiveTestCaseResult]>): void {\n  for (const [name, r] of results) {\n    console.log(`[${r.status}] ${name} (${r.timems}ms). Log:`);\n    if (r.logs) {\n      for (const l of r.logs) {\n        console.log('  - ' + l.toJSON().replace(/\\n/g, '\\n    '));\n      }\n    }\n  }\n}\n"],"file":"cmdline.js"}