{"version":3,"sources":["../../src/unittests/params_builder_toplevel.spec.ts"],"names":["description","params","makeTestGroup","makeTestGroupForUnitTesting","TestGroupTest","UnitTest","g","test","fn","t","fail","combine","a","x","y","filter","p","expect","unless","exclude","t0","ran","push","expectCases"],"mappings":"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","sourcesContent":["export const description = `\nUnit tests for parameterization.\n`;\n\nimport { params } from '../common/framework/params_builder.js';\nimport { CaseParams } from '../common/framework/params_utils.js';\nimport { makeTestGroup, makeTestGroupForUnitTesting } from '../common/framework/test_group.js';\n\nimport { TestGroupTest } from './test_group_test.js';\nimport { UnitTest } from './unit_test.js';\n\nexport const g = makeTestGroup(TestGroupTest);\n\ng.test('none')\n  .params([])\n  .fn(t => {\n    t.fail(\"this test shouldn't run\");\n  });\n\ng.test('combine_none')\n  .params(params().combine([]))\n  .fn(t => {\n    t.fail(\"this test shouldn't run\");\n  });\n\ng.test('filter')\n  .params(\n    params()\n      .combine([\n        { a: true, x: 1 }, //\n        { a: false, y: 2 },\n      ])\n      .filter(p => p.a)\n  )\n  .fn(t => {\n    t.expect(t.params.a);\n  });\n\ng.test('unless')\n  .params(\n    params()\n      .combine([\n        { a: true, x: 1 }, //\n        { a: false, y: 2 },\n      ])\n      .unless(p => p.a)\n  )\n  .fn(t => {\n    t.expect(!t.params.a);\n  });\n\ng.test('exclude')\n  .params(\n    params()\n      .combine([\n        { a: true, x: 1 },\n        { a: false, y: 2 },\n      ])\n      .exclude([\n        { a: true }, //\n        { a: false, y: 2 },\n      ])\n  )\n  .fn(t => {\n    t.expect(t.params.a);\n  });\n\ng.test('generator').fn(t0 => {\n  const g = makeTestGroupForUnitTesting(UnitTest);\n\n  const ran: CaseParams[] = [];\n\n  g.test('generator')\n    .params(\n      (function* (): IterableIterator<CaseParams> {\n        for (let x = 0; x < 3; ++x) {\n          for (let y = 0; y < 2; ++y) {\n            yield { x, y };\n          }\n        }\n      })()\n    )\n    .fn(t => {\n      ran.push(t.params);\n    });\n\n  t0.expectCases(g, [\n    { test: ['generator'], params: { x: 0, y: 0 } },\n    { test: ['generator'], params: { x: 0, y: 1 } },\n    { test: ['generator'], params: { x: 1, y: 0 } },\n    { test: ['generator'], params: { x: 1, y: 1 } },\n    { test: ['generator'], params: { x: 2, y: 0 } },\n    { test: ['generator'], params: { x: 2, y: 1 } },\n  ]);\n});\n"],"file":"params_builder_toplevel.spec.js"}