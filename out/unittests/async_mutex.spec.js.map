{"version":3,"sources":["../../src/unittests/async_mutex.spec.ts"],"names":["description","makeTestGroup","AsyncMutex","objectEquals","UnitTest","g","test","fn","t","mutex","with","Promise","all","actual","expected","i","push","expect","ret"],"mappings":"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","sourcesContent":["export const description = `\nTests for AsyncMutex.\n`;\n\nimport { makeTestGroup } from '../common/framework/test_group.js';\nimport { AsyncMutex } from '../common/framework/util/async_mutex.js';\nimport { objectEquals } from '../common/framework/util/util.js';\n\nimport { UnitTest } from './unit_test.js';\n\nexport const g = makeTestGroup(UnitTest);\n\n/* eslint-disable-next-line  @typescript-eslint/no-unused-vars */\ng.test('basic').fn(async t => {\n  const mutex = new AsyncMutex();\n  await mutex.with(async () => {});\n});\n\n/* eslint-disable-next-line  @typescript-eslint/no-unused-vars */\ng.test('serial').fn(async t => {\n  const mutex = new AsyncMutex();\n  await mutex.with(async () => {});\n  await mutex.with(async () => {});\n  await mutex.with(async () => {});\n});\n\n/* eslint-disable-next-line  @typescript-eslint/no-unused-vars */\ng.test('parallel').fn(async t => {\n  const mutex = new AsyncMutex();\n  await Promise.all([\n    mutex.with(async () => {}),\n    mutex.with(async () => {}),\n    mutex.with(async () => {}),\n  ]);\n});\n\ng.test('parallel,many').fn(async t => {\n  const mutex = new AsyncMutex();\n  const actual: number[] = [];\n  const expected = [];\n  for (let i = 0; i < 1000; ++i) {\n    expected.push(i);\n    mutex.with(async () => {\n      actual.push(i);\n    });\n  }\n  await mutex.with(async () => {});\n  t.expect(objectEquals(actual, expected));\n});\n\ng.test('return').fn(async t => {\n  const mutex = new AsyncMutex();\n  const ret = await mutex.with(async () => 123);\n  t.expect(ret === 123);\n});\n\ng.test('return,parallel').fn(async t => {\n  const mutex = new AsyncMutex();\n  const ret = await Promise.all([\n    mutex.with(async () => 1),\n    mutex.with(async () => 2),\n    mutex.with(async () => 3),\n  ]);\n  t.expect(objectEquals(ret, [1, 2, 3]));\n});\n"],"file":"async_mutex.spec.js"}